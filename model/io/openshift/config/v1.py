# generated by datamodel-codegen:
#   filename:  openapi-v2.json
#   timestamp: 2021-04-29T07:54:09+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, conint, constr

from ...k8s.apimachinery.pkg.apis.meta import v1


class Profile(Enum):
    Default = 'Default'
    WriteRequestBodies = 'WriteRequestBodies'
    AllRequestBodies = 'AllRequestBodies'


class Audit(BaseModel):
    profile: Optional[Profile] = Field(
        None,
        description="profile specifies the name of the desired audit policy configuration to be deployed to all OpenShift-provided API servers in the cluster. \n The following profiles are provided: - Default: the existing default policy. - WriteRequestBodies: like 'Default', but logs request and response HTTP payloads for write requests (create, update, patch). - AllRequestBodies: like 'WriteRequestBodies', but also logs request and response HTTP payloads for read requests (get, list). \n If unset, the 'Default' profile is used as the default.",
    )


class ClientCA(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class Type(Enum):
    _ = ''
    identity = 'identity'
    aescbc = 'aescbc'


class Encryption(BaseModel):
    type: Optional[Type] = Field(
        None,
        description='type defines what encryption type should be used to encrypt resources at the datastore layer. When this field is unset (i.e. when it is set to the empty string), identity is implied. The behavior of unset can and will change over time.  Even if encryption is enabled by default, the meaning of unset may change to a different encryption type based on changes in best practices. \n When encryption is enabled, all sensitive resources shipped with the platform are encrypted. This list of sensitive resources can and will change over time.  The current authoritative list is: \n   1. secrets   2. configmaps   3. routes.route.openshift.io   4. oauthaccesstokens.oauth.openshift.io   5. oauthauthorizetokens.oauth.openshift.io',
    )


class ServingCertificate(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class NamedCertificate(BaseModel):
    names: Optional[List[str]] = Field(
        None,
        description='names is a optional list of explicit DNS names (leading wildcards allowed) that should use this certificate to serve secure traffic. If no names are provided, the implicit names will be extracted from the certificates. Exact names trump over wildcard names. Explicit names defined here trump over extracted implicit names.',
    )
    servingCertificate: Optional[ServingCertificate] = Field(
        None,
        description='servingCertificate references a kubernetes.io/tls type secret containing the TLS cert info for serving secure traffic. The secret must exist in the openshift-config namespace and contain the following required fields: - Secret.Data["tls.key"] - TLS private key. - Secret.Data["tls.crt"] - TLS certificate.',
    )


class ServingCerts(BaseModel):
    namedCertificates: Optional[List[NamedCertificate]] = Field(
        None,
        description='namedCertificates references secrets containing the TLS cert info for serving secure traffic to specific hostnames. If no named certificates are provided, or no named certificates match the server name as understood by a client, the defaultServingCertificate will be used.',
    )


class TypeModel(Enum):
    Old = 'Old'
    Intermediate = 'Intermediate'
    Modern = 'Modern'
    Custom = 'Custom'


class TlsSecurityProfile(BaseModel):
    custom: Optional[Any] = Field(
        None,
        description='custom is a user-defined TLS security profile. Be extremely careful using a custom profile as invalid configurations can be catastrophic. An example custom profile looks like this: \n   ciphers:     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256   minTLSVersion: TLSv1.1',
    )
    intermediate: Optional[Any] = Field(
        None,
        description='intermediate is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29 \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384   minTLSVersion: TLSv1.2',
    )
    modern: Optional[Any] = Field(
        None,
        description='modern is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256   minTLSVersion: TLSv1.3 \n NOTE: Currently unsupported.',
    )
    old: Optional[Any] = Field(
        None,
        description='old is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384     - DHE-RSA-CHACHA20-POLY1305     - ECDHE-ECDSA-AES128-SHA256     - ECDHE-RSA-AES128-SHA256     - ECDHE-ECDSA-AES128-SHA     - ECDHE-RSA-AES128-SHA     - ECDHE-ECDSA-AES256-SHA384     - ECDHE-RSA-AES256-SHA384     - ECDHE-ECDSA-AES256-SHA     - ECDHE-RSA-AES256-SHA     - DHE-RSA-AES128-SHA256     - DHE-RSA-AES256-SHA256     - AES128-GCM-SHA256     - AES256-GCM-SHA384     - AES128-SHA256     - AES256-SHA256     - AES128-SHA     - AES256-SHA     - DES-CBC3-SHA   minTLSVersion: TLSv1.0',
    )
    type: Optional[TypeModel] = Field(
        None,
        description='type is one of Old, Intermediate, Modern or Custom. Custom provides the ability to specify individual TLS security profile parameters. Old, Intermediate and Modern are TLS security profiles based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations \n The profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers are found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be reduced. \n Note that the Modern profile is currently not supported because it is not yet well adopted by common software libraries.',
    )


class Spec(BaseModel):
    additionalCORSAllowedOrigins: Optional[List[str]] = Field(
        None,
        description='additionalCORSAllowedOrigins lists additional, user-defined regular expressions describing hosts for which the API server allows access using the CORS headers. This may be needed to access the API and the integrated OAuth server from JavaScript applications. The values are regular expressions that correspond to the Golang regular expression language.',
    )
    audit: Optional[Audit] = Field(
        None,
        description='audit specifies the settings for audit configuration to be applied to all OpenShift-provided API servers in the cluster.',
    )
    clientCA: Optional[ClientCA] = Field(
        None,
        description='clientCA references a ConfigMap containing a certificate bundle for the signers that will be recognized for incoming client certificates in addition to the operator managed signers. If this is empty, then only operator managed signers are valid. You usually only have to set this if you have your own PKI you wish to honor client certificates from. The ConfigMap must exist in the openshift-config namespace and contain the following required fields: - ConfigMap.Data["ca-bundle.crt"] - CA bundle.',
    )
    encryption: Optional[Encryption] = Field(
        None,
        description='encryption allows the configuration of encryption of resources at the datastore layer.',
    )
    servingCerts: Optional[ServingCerts] = Field(
        None,
        description='servingCert is the TLS cert info for serving secure traffic. If not specified, operator managed certificates will be used for serving secure traffic.',
    )
    tlsSecurityProfile: Optional[TlsSecurityProfile] = Field(
        None,
        description='tlsSecurityProfile specifies settings for TLS connections for externally exposed servers. \n If unset, a default (which may change between releases) is chosen. Note that only Old and Intermediate profiles are currently supported, and the maximum available MinTLSVersions is VersionTLS12.',
    )


class OauthMetadata(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class KubeConfig(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class WebhookTokenAuthenticator(BaseModel):
    kubeConfig: KubeConfig = Field(
        ...,
        description='kubeConfig references a secret that contains kube config file data which describes how to access the remote webhook service. The namespace for the referenced secret is openshift-config. \n For further details, see: \n https://kubernetes.io/docs/reference/access-authn-authz/authentication/#webhook-token-authentication \n The key "kubeConfig" is used to locate the data. If the secret or expected key is not found, the webhook is not honored. If the specified kube config data is not valid, the webhook is not honored.',
    )


class KubeConfigModel(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class WebhookTokenAuthenticatorModel(BaseModel):
    kubeConfig: Optional[KubeConfigModel] = Field(
        None,
        description='kubeConfig contains kube config file data which describes how to access the remote webhook service. For further details, see: https://kubernetes.io/docs/reference/access-authn-authz/authentication/#webhook-token-authentication The key "kubeConfig" is used to locate the data. If the secret or expected key is not found, the webhook is not honored. If the specified kube config data is not valid, the webhook is not honored. The namespace for this secret is determined by the point of use.',
    )


class SpecModel(BaseModel):
    oauthMetadata: Optional[OauthMetadata] = Field(
        None,
        description='oauthMetadata contains the discovery endpoint data for OAuth 2.0 Authorization Server Metadata for an external OAuth server. This discovery document can be viewed from its served location: oc get --raw \'/.well-known/oauth-authorization-server\' For further details, see the IETF Draft: https://tools.ietf.org/html/draft-ietf-oauth-discovery-04#section-2 If oauthMetadata.name is non-empty, this value has precedence over any metadata reference stored in status. The key "oauthMetadata" is used to locate the data. If specified and the config map or expected key is not found, no metadata is served. If the specified metadata is not valid, no metadata is served. The namespace for this config map is openshift-config.',
    )
    serviceAccountIssuer: Optional[str] = Field(
        None,
        description='serviceAccountIssuer is the identifier of the bound service account token issuer. The default is https://kubernetes.default.svc WARNING: Updating this field will result in the invalidation of all bound tokens with the previous issuer value. Unless the holder of a bound token has explicit support for a change in issuer, they will not request a new bound token until pod restart or until their existing token exceeds 80% of its duration.',
    )
    type: Optional[str] = Field(
        None,
        description='type identifies the cluster managed, user facing authentication mode in use. Specifically, it manages the component that responds to login attempts. The default is IntegratedOAuth.',
    )
    webhookTokenAuthenticator: Optional[WebhookTokenAuthenticator] = Field(
        None,
        description='webhookTokenAuthenticator configures a remote token reviewer. These remote authentication webhooks can be used to verify bearer tokens via the tokenreviews.authentication.k8s.io REST API. This is required to honor bearer tokens that are provisioned by an external authentication service.',
    )
    webhookTokenAuthenticators: Optional[List[WebhookTokenAuthenticatorModel]] = Field(
        None,
        description='webhookTokenAuthenticators is DEPRECATED, setting it has no effect.',
    )


class IntegratedOAuthMetadata(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class Status(BaseModel):
    integratedOAuthMetadata: Optional[IntegratedOAuthMetadata] = Field(
        None,
        description='integratedOAuthMetadata contains the discovery endpoint data for OAuth 2.0 Authorization Server Metadata for the in-cluster integrated OAuth server. This discovery document can be viewed from its served location: oc get --raw \'/.well-known/oauth-authorization-server\' For further details, see the IETF Draft: https://tools.ietf.org/html/draft-ietf-oauth-discovery-04#section-2 This contains the observed value based on cluster state. An explicitly set value in spec.oauthMetadata has precedence over this field. This field has no meaning if authentication spec.type is not set to IntegratedOAuth. The key "oauthMetadata" is used to locate the data. If the config map or expected key is not found, no metadata is served. If the specified metadata is not valid, no metadata is served. The namespace for this config map is openshift-config-managed.',
    )


class AdditionalTrustedCA(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class TrustedCA(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class DefaultProxy(BaseModel):
    httpProxy: Optional[str] = Field(
        None,
        description='httpProxy is the URL of the proxy for HTTP requests.  Empty means unset and will not result in an env var.',
    )
    httpsProxy: Optional[str] = Field(
        None,
        description='httpsProxy is the URL of the proxy for HTTPS requests.  Empty means unset and will not result in an env var.',
    )
    noProxy: Optional[str] = Field(
        None,
        description='noProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Empty means unset and will not result in an env var.',
    )
    readinessEndpoints: Optional[List[str]] = Field(
        None,
        description='readinessEndpoints is a list of endpoints used to verify readiness of the proxy.',
    )
    trustedCA: Optional[TrustedCA] = Field(
        None,
        description='trustedCA is a reference to a ConfigMap containing a CA certificate bundle. The trustedCA field should only be consumed by a proxy validator. The validator is responsible for reading the certificate bundle from the required key "ca-bundle.crt", merging it with the system default trust bundle, and writing the merged trust bundle to a ConfigMap named "trusted-ca-bundle" in the "openshift-config-managed" namespace. Clients that expect to make proxy connections must use the trusted-ca-bundle for all HTTPS requests to the proxy, and may use the trusted-ca-bundle for non-proxy HTTPS requests as well. \n The namespace for the ConfigMap referenced by trustedCA is "openshift-config". Here is an example ConfigMap (in yaml): \n apiVersion: v1 kind: ConfigMap metadata:  name: user-ca-bundle  namespace: openshift-config  data:    ca-bundle.crt: |      -----BEGIN CERTIFICATE-----      Custom CA certificate bundle.      -----END CERTIFICATE-----',
    )


class ConfigMapKeyRef(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class FieldRef(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRef(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class SecretKeyRef(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ValueFrom(BaseModel):
    configMapKeyRef: Optional[ConfigMapKeyRef] = Field(
        None, description='Selects a key of a ConfigMap.'
    )
    fieldRef: Optional[FieldRef] = Field(
        None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItem(BaseModel):
    name: str = Field(
        ..., description='Name of the environment variable. Must be a C_IDENTIFIER.'
    )
    value: Optional[str] = Field(
        None,
        description='Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
    )
    valueFrom: Optional[ValueFrom] = Field(
        None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class TrustedCAModel(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class GitProxy(BaseModel):
    httpProxy: Optional[str] = Field(
        None,
        description='httpProxy is the URL of the proxy for HTTP requests.  Empty means unset and will not result in an env var.',
    )
    httpsProxy: Optional[str] = Field(
        None,
        description='httpsProxy is the URL of the proxy for HTTPS requests.  Empty means unset and will not result in an env var.',
    )
    noProxy: Optional[str] = Field(
        None,
        description='noProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Empty means unset and will not result in an env var.',
    )
    readinessEndpoints: Optional[List[str]] = Field(
        None,
        description='readinessEndpoints is a list of endpoints used to verify readiness of the proxy.',
    )
    trustedCA: Optional[TrustedCAModel] = Field(
        None,
        description='trustedCA is a reference to a ConfigMap containing a CA certificate bundle. The trustedCA field should only be consumed by a proxy validator. The validator is responsible for reading the certificate bundle from the required key "ca-bundle.crt", merging it with the system default trust bundle, and writing the merged trust bundle to a ConfigMap named "trusted-ca-bundle" in the "openshift-config-managed" namespace. Clients that expect to make proxy connections must use the trusted-ca-bundle for all HTTPS requests to the proxy, and may use the trusted-ca-bundle for non-proxy HTTPS requests as well. \n The namespace for the ConfigMap referenced by trustedCA is "openshift-config". Here is an example ConfigMap (in yaml): \n apiVersion: v1 kind: ConfigMap metadata:  name: user-ca-bundle  namespace: openshift-config  data:    ca-bundle.crt: |      -----BEGIN CERTIFICATE-----      Custom CA certificate bundle.      -----END CERTIFICATE-----',
    )


class ImageLabel(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name defines the name of the label. It must have non-zero length.',
    )
    value: Optional[str] = Field(
        None, description='Value defines the literal value of the label.'
    )


class Resources(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
    )


class BuildDefaults(BaseModel):
    defaultProxy: Optional[DefaultProxy] = Field(
        None,
        description="DefaultProxy contains the default proxy settings for all build operations, including image pull/push and source download. \n Values can be overrode by setting the `HTTP_PROXY`, `HTTPS_PROXY`, and `NO_PROXY` environment variables in the build config's strategy.",
    )
    env: Optional[List[EnvItem]] = Field(
        None,
        description='Env is a set of default environment variables that will be applied to the build if the specified variables do not exist on the build',
    )
    gitProxy: Optional[GitProxy] = Field(
        None,
        description='GitProxy contains the proxy settings for git operations only. If set, this will override any Proxy settings for all git commands, such as git clone. \n Values that are not set here will be inherited from DefaultProxy.',
    )
    imageLabels: Optional[List[ImageLabel]] = Field(
        None,
        description='ImageLabels is a list of docker labels that are applied to the resulting image. User can override a default label by providing a label with the same name in their Build/BuildConfig.',
    )
    resources: Optional[Resources] = Field(
        None,
        description='Resources defines resource requirements to execute the build.',
    )


class ImageLabelModel(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name defines the name of the label. It must have non-zero length.',
    )
    value: Optional[str] = Field(
        None, description='Value defines the literal value of the label.'
    )


class Toleration(BaseModel):
    effect: Optional[str] = Field(
        None,
        description='Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
    )
    key: Optional[str] = Field(
        None,
        description='Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
    )
    operator: Optional[str] = Field(
        None,
        description="Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
    )
    tolerationSeconds: Optional[int] = Field(
        None,
        description='TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
    )
    value: Optional[str] = Field(
        None,
        description='Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
    )


class BuildOverrides(BaseModel):
    forcePull: Optional[bool] = Field(
        None,
        description='ForcePull overrides, if set, the equivalent value in the builds, i.e. false disables force pull for all builds, true enables force pull for all builds, independently of what each build specifies itself',
    )
    imageLabels: Optional[List[ImageLabelModel]] = Field(
        None,
        description="ImageLabels is a list of docker labels that are applied to the resulting image. If user provided a label in their Build/BuildConfig with the same name as one in this list, the user's label will be overwritten.",
    )
    nodeSelector: Optional[Dict[str, str]] = Field(
        None,
        description='NodeSelector is a selector which must be true for the build pod to fit on a node',
    )
    tolerations: Optional[List[Toleration]] = Field(
        None,
        description='Tolerations is a list of Tolerations that will override any existing tolerations set on a build pod.',
    )


class SpecModel1(BaseModel):
    additionalTrustedCA: Optional[AdditionalTrustedCA] = Field(
        None,
        description='AdditionalTrustedCA is a reference to a ConfigMap containing additional CAs that should be trusted for image pushes and pulls during builds. The namespace for this config map is openshift-config. \n DEPRECATED: Additional CAs for image pull and push should be set on image.config.openshift.io/cluster instead.',
    )
    buildDefaults: Optional[BuildDefaults] = Field(
        None, description='BuildDefaults controls the default information for Builds'
    )
    buildOverrides: Optional[BuildOverrides] = Field(
        None, description='BuildOverrides controls override settings for builds'
    )


class Condition(BaseModel):
    lastTransitionTime: datetime = Field(
        ...,
        description='lastTransitionTime is the time of the last update to the current status property.',
    )
    message: Optional[str] = Field(
        None,
        description='message provides additional information about the current condition. This is only to be consumed by humans.',
    )
    reason: Optional[str] = Field(
        None,
        description="reason is the CamelCase reason for the condition's current status.",
    )
    status: str = Field(
        ..., description='status of the condition, one of True, False, Unknown.'
    )
    type: str = Field(
        ..., description='type specifies the aspect reported by this condition.'
    )


class RelatedObject(BaseModel):
    group: str = Field(..., description='group of the referent.')
    name: str = Field(..., description='name of the referent.')
    namespace: Optional[str] = Field(None, description='namespace of the referent.')
    resource: str = Field(..., description='resource of the referent.')


class Version(BaseModel):
    name: str = Field(
        ...,
        description='name is the name of the particular operand this version is for.  It usually matches container images, not operators.',
    )
    version: str = Field(
        ...,
        description='version indicates which version of a particular operand is currently being managed.  It must always match the Available operand.  If 1.0.0 is Available, then this must indicate 1.0.0 even if the operator is trying to rollout 1.1.0',
    )


class StatusModel(BaseModel):
    conditions: Optional[List[Condition]] = Field(
        None,
        description="conditions describes the state of the operator's managed and monitored components.",
    )
    extension: Optional[Any] = Field(
        None,
        description='extension contains any additional status information specific to the operator which owns this status object.',
    )
    relatedObjects: Optional[List[RelatedObject]] = Field(
        None,
        description='relatedObjects is a list of objects that are "interesting" or related to this operator.  Common uses are: 1. the detailed resource driving the operator 2. operator namespaces 3. operand namespaces',
    )
    versions: Optional[List[Version]] = Field(
        None,
        description='versions is a slice of operator and operand version tuples.  Operators which manage multiple operands will have multiple operand entries in the array.  Available operators must report the version of the operator itself with the name "operator". An operator reports a new "operator" version when it has rolled out the new version to all of its operands.',
    )


class DesiredUpdate(BaseModel):
    force: Optional[bool] = Field(
        None,
        description='force allows an administrator to update to an image that has failed verification, does not appear in the availableUpdates list, or otherwise would be blocked by normal protections on update. This option should only be used when the authenticity of the provided image has been verified out of band because the provided image will run with full administrative access to the cluster. Do not use this flag with images that comes from unknown or potentially malicious sources. \n This flag does not override other forms of consistency checking that are required before a new update is deployed.',
    )
    image: Optional[str] = Field(
        None,
        description='image is a container image location that contains the update. When this field is part of spec, image is optional if version is specified and the availableUpdates field contains a matching version.',
    )
    version: Optional[str] = Field(
        None,
        description='version is a semantic versioning identifying the update version. When this field is part of spec, version is optional if image is specified.',
    )


class Override(BaseModel):
    group: str = Field(
        ..., description='group identifies the API group that the kind is in.'
    )
    kind: str = Field(..., description='kind indentifies which object to override.')
    name: str = Field(..., description="name is the component's name.")
    namespace: str = Field(
        ...,
        description="namespace is the component's namespace. If the resource is cluster scoped, the namespace should be empty.",
    )
    unmanaged: bool = Field(
        ...,
        description='unmanaged controls if cluster version operator should stop managing the resources in this cluster. Default: false',
    )


class SpecModel2(BaseModel):
    channel: Optional[str] = Field(
        None,
        description='channel is an identifier for explicitly requesting that a non-default set of updates be applied to this cluster. The default channel will be contain stable updates that are appropriate for production clusters.',
    )
    clusterID: str = Field(
        ...,
        description='clusterID uniquely identifies this cluster. This is expected to be an RFC4122 UUID value (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx in hexadecimal values). This is a required field.',
    )
    desiredUpdate: Optional[DesiredUpdate] = Field(
        None,
        description='desiredUpdate is an optional field that indicates the desired value of the cluster version. Setting this value will trigger an upgrade (if the current version does not match the desired version). The set of recommended update values is listed as part of available updates in status, and setting values outside that range may cause the upgrade to fail. You may specify the version field without setting image if an update exists with that version in the availableUpdates or history. \n If an upgrade fails the operator will halt and report status about the failing component. Setting the desired update value back to the previous version will cause a rollback to be attempted. Not all rollbacks will succeed.',
    )
    overrides: Optional[List[Override]] = Field(
        None,
        description='overrides is list of overides for components that are managed by cluster version operator. Marking a component unmanaged will prevent the operator from creating or updating the object.',
    )
    upstream: Optional[str] = Field(
        None,
        description='upstream may be used to specify the preferred update server. By default it will use the appropriate update server for the cluster and region.',
    )


class ConditionModel(BaseModel):
    lastTransitionTime: datetime = Field(
        ...,
        description='lastTransitionTime is the time of the last update to the current status property.',
    )
    message: Optional[str] = Field(
        None,
        description='message provides additional information about the current condition. This is only to be consumed by humans.',
    )
    reason: Optional[str] = Field(
        None,
        description="reason is the CamelCase reason for the condition's current status.",
    )
    status: str = Field(
        ..., description='status of the condition, one of True, False, Unknown.'
    )
    type: str = Field(
        ..., description='type specifies the aspect reported by this condition.'
    )


class Desired(BaseModel):
    channels: Optional[List[str]] = Field(
        None,
        description='channels is the set of Cincinnati channels to which the release currently belongs.',
    )
    image: Optional[str] = Field(
        None,
        description='image is a container image location that contains the update. When this field is part of spec, image is optional if version is specified and the availableUpdates field contains a matching version.',
    )
    url: Optional[str] = Field(
        None,
        description="url contains information about this release. This URL is set by the 'url' metadata property on a release or the metadata returned by the update API and should be displayed as a link in user interfaces. The URL field may not be set for test or nightly releases.",
    )
    version: Optional[str] = Field(
        None,
        description='version is a semantic versioning identifying the update version. When this field is part of spec, version is optional if image is specified.',
    )


class HistoryItem(BaseModel):
    completionTime: Optional[Any] = Field(
        None,
        description='completionTime, if set, is when the update was fully applied. The update that is currently being applied will have a null completion time. Completion time will always be set for entries that are not the current update (usually to the started time of the next update).',
    )
    image: str = Field(
        ...,
        description='image is a container image location that contains the update. This value is always populated.',
    )
    startedTime: datetime = Field(
        ..., description='startedTime is the time at which the update was started.'
    )
    state: str = Field(
        ...,
        description='state reflects whether the update was fully applied. The Partial state indicates the update is not fully applied, while the Completed state indicates the update was successfully rolled out at least once (all parts of the update successfully applied).',
    )
    verified: bool = Field(
        ...,
        description='verified indicates whether the provided update was properly verified before it was installed. If this is false the cluster may not be trusted.',
    )
    version: Optional[str] = Field(
        None,
        description='version is a semantic versioning identifying the update version. If the requested image does not define a version, or if a failure occurs retrieving the image, this value may be empty.',
    )


class StatusModel1(BaseModel):
    availableUpdates: Optional[Any] = Field(
        None,
        description='availableUpdates contains the list of updates that are appropriate for this cluster. This list may be empty if no updates are recommended, if the update service is unavailable, or if an invalid channel has been specified.',
    )
    conditions: Optional[List[ConditionModel]] = Field(
        None,
        description='conditions provides information about the cluster version. The condition "Available" is set to true if the desiredUpdate has been reached. The condition "Progressing" is set to true if an update is being applied. The condition "Degraded" is set to true if an update is currently blocked by a temporary or permanent error. Conditions are only valid for the current desiredUpdate when metadata.generation is equal to status.generation.',
    )
    desired: Desired = Field(
        ...,
        description='desired is the version that the cluster is reconciling towards. If the cluster is not yet fully initialized desired will be set with the information available, which may be an image or a tag.',
    )
    history: Optional[List[HistoryItem]] = Field(
        None,
        description='history contains a list of the most recent versions applied to the cluster. This value may be empty during cluster startup, and then will be updated when a new update is being applied. The newest update is first in the list and it is ordered by recency. Updates in the history have state Completed if the rollout completed - if an update was failing or halfway applied the state will be Partial. Only a limited amount of update history is preserved.',
    )
    observedGeneration: int = Field(
        ...,
        description='observedGeneration reports which version of the spec is being synced. If this value is not equal to metadata.generation, then the desired and conditions fields may represent a previous version.',
    )
    versionHash: str = Field(
        ...,
        description='versionHash is a fingerprint of the content that the cluster will be updated with. It is used by the operator to avoid unnecessary work and is for internal use only.',
    )


class Authentication(BaseModel):
    logoutRedirect: Optional[
        constr(
            regex=r'^$|^((https):\/\/?)[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|\/?))$'
        )
    ] = Field(
        None,
        description="An optional, absolute URL to redirect web browsers to after logging out of the console. If not specified, it will redirect to the default login page. This is required when using an identity provider that supports single sign-on (SSO) such as: - OpenID (Keycloak, Azure) - RequestHeader (GSSAPI, SSPI, SAML) - OAuth (GitHub, GitLab, Google) Logging out of the console will destroy the user's token. The logoutRedirect provides the user the option to perform single logout (SLO) through the identity provider to destroy their single sign-on session.",
    )


class SpecModel3(BaseModel):
    authentication: Optional[Authentication] = Field(
        None,
        description='ConsoleAuthentication defines a list of optional configuration for console authentication.',
    )


class StatusModel2(BaseModel):
    consoleURL: Optional[str] = Field(
        None,
        description='The URL for the console. This will be derived from the host for the route that is created for the console.',
    )


class PrivateZone(BaseModel):
    id: Optional[str] = Field(
        None,
        description='id is the identifier that can be used to find the DNS hosted zone. \n on AWS zone can be fetched using `ID` as id in [1] on Azure zone can be fetched using `ID` as a pre-determined name in [2], on GCP zone can be fetched using `ID` as a pre-determined name in [3]. \n [1]: https://docs.aws.amazon.com/cli/latest/reference/route53/get-hosted-zone.html#options [2]: https://docs.microsoft.com/en-us/cli/azure/network/dns/zone?view=azure-cli-latest#az-network-dns-zone-show [3]: https://cloud.google.com/dns/docs/reference/v1/managedZones/get',
    )
    tags: Optional[Dict[str, str]] = Field(
        None,
        description='tags can be used to query the DNS hosted zone. \n on AWS, resourcegroupstaggingapi [1] can be used to fetch a zone using `Tags` as tag-filters, \n [1]: https://docs.aws.amazon.com/cli/latest/reference/resourcegroupstaggingapi/get-resources.html#options',
    )


class PublicZone(BaseModel):
    id: Optional[str] = Field(
        None,
        description='id is the identifier that can be used to find the DNS hosted zone. \n on AWS zone can be fetched using `ID` as id in [1] on Azure zone can be fetched using `ID` as a pre-determined name in [2], on GCP zone can be fetched using `ID` as a pre-determined name in [3]. \n [1]: https://docs.aws.amazon.com/cli/latest/reference/route53/get-hosted-zone.html#options [2]: https://docs.microsoft.com/en-us/cli/azure/network/dns/zone?view=azure-cli-latest#az-network-dns-zone-show [3]: https://cloud.google.com/dns/docs/reference/v1/managedZones/get',
    )
    tags: Optional[Dict[str, str]] = Field(
        None,
        description='tags can be used to query the DNS hosted zone. \n on AWS, resourcegroupstaggingapi [1] can be used to fetch a zone using `Tags` as tag-filters, \n [1]: https://docs.aws.amazon.com/cli/latest/reference/resourcegroupstaggingapi/get-resources.html#options',
    )


class SpecModel4(BaseModel):
    baseDomain: Optional[str] = Field(
        None,
        description='baseDomain is the base domain of the cluster. All managed DNS records will be sub-domains of this base. \n For example, given the base domain `openshift.example.com`, an API server DNS record may be created for `cluster-api.openshift.example.com`. \n Once set, this field cannot be changed.',
    )
    privateZone: Optional[PrivateZone] = Field(
        None,
        description='privateZone is the location where all the DNS records that are only available internally to the cluster exist. \n If this field is nil, no private records should be created. \n Once set, this field cannot be changed.',
    )
    publicZone: Optional[PublicZone] = Field(
        None,
        description='publicZone is the location where all the DNS records that are publicly accessible to the internet exist. \n If this field is nil, no public records should be created. \n Once set, this field cannot be changed.',
    )


class SpecModel5(BaseModel):
    customNoUpgrade: Optional[Any] = Field(
        None,
        description='customNoUpgrade allows the enabling or disabling of any feature. Turning this feature set on IS NOT SUPPORTED, CANNOT BE UNDONE, and PREVENTS UPGRADES. Because of its nature, this setting cannot be validated.  If you have any typos or accidentally apply invalid combinations your cluster may fail in an unrecoverable way.  featureSet must equal "CustomNoUpgrade" must be set to use this field.',
    )
    featureSet: Optional[str] = Field(
        None,
        description='featureSet changes the list of features in the cluster.  The default is empty.  Be very careful adjusting this setting. Turning on or off features may cause irreversible changes in your cluster which cannot be undone.',
    )


class AdditionalTrustedCAModel(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class AllowedRegistriesForImportItem(BaseModel):
    domainName: Optional[str] = Field(
        None,
        description='domainName specifies a domain name for the registry In case the registry use non-standard (80 or 443) port, the port should be included in the domain name as well.',
    )
    insecure: Optional[bool] = Field(
        None,
        description='insecure indicates whether the registry is secure (https) or insecure (http) By default (if not specified) the registry is assumed as secure.',
    )


class RegistrySources(BaseModel):
    allowedRegistries: Optional[List[str]] = Field(
        None,
        description='allowedRegistries are the only registries permitted for image pull and push actions. All other registries are denied. \n Only one of BlockedRegistries or AllowedRegistries may be set.',
    )
    blockedRegistries: Optional[List[str]] = Field(
        None,
        description='blockedRegistries cannot be used for image pull and push actions. All other registries are permitted. \n Only one of BlockedRegistries or AllowedRegistries may be set.',
    )
    containerRuntimeSearchRegistries: Optional[List[str]] = Field(
        None,
        description='containerRuntimeSearchRegistries are registries that will be searched when pulling images that do not have fully qualified domains in their pull specs. Registries will be searched in the order provided in the list. Note: this search list only works with the container runtime, i.e CRI-O. Will NOT work with builds or imagestream imports.',
        min_items=1,
    )
    insecureRegistries: Optional[List[str]] = Field(
        None,
        description='insecureRegistries are registries which do not have a valid TLS certificates or only support HTTP connections.',
    )


class SpecModel6(BaseModel):
    additionalTrustedCA: Optional[AdditionalTrustedCAModel] = Field(
        None,
        description='additionalTrustedCA is a reference to a ConfigMap containing additional CAs that should be trusted during imagestream import, pod image pull, build image pull, and imageregistry pullthrough. The namespace for this config map is openshift-config.',
    )
    allowedRegistriesForImport: Optional[List[AllowedRegistriesForImportItem]] = Field(
        None,
        description='allowedRegistriesForImport limits the container image registries that normal users may import images from. Set this list to the registries that you trust to contain valid Docker images and that you want applications to be able to import from. Users with permission to create Images or ImageStreamMappings via the API are not affected by this policy - typically only administrators or system integrations will have those permissions.',
    )
    externalRegistryHostnames: Optional[List[str]] = Field(
        None,
        description='externalRegistryHostnames provides the hostnames for the default external image registry. The external hostname should be set only when the image registry is exposed externally. The first value is used in \'publicDockerImageRepository\' field in ImageStreams. The value must be in "hostname[:port]" format.',
    )
    registrySources: Optional[RegistrySources] = Field(
        None,
        description='registrySources contains configuration that determines how the container runtime should treat individual registries when accessing images for builds+pods. (e.g. whether or not to allow insecure access).  It does not contain configuration for the internal cluster registry.',
    )


class StatusModel3(BaseModel):
    externalRegistryHostnames: Optional[List[str]] = Field(
        None,
        description='externalRegistryHostnames provides the hostnames for the default external image registry. The external hostname should be set only when the image registry is exposed externally. The first value is used in \'publicDockerImageRepository\' field in ImageStreams. The value must be in "hostname[:port]" format.',
    )
    internalRegistryHostname: Optional[str] = Field(
        None,
        description='internalRegistryHostname sets the hostname for the default internal image registry. The value must be in "hostname[:port]" format. This value is set by the image registry operator which controls the internal registry hostname. For backward compatibility, users can still use OPENSHIFT_DEFAULT_REGISTRY environment variable but this setting overrides the environment variable.',
    )


class CloudConfig(BaseModel):
    key: Optional[str] = Field(
        None,
        description='Key allows pointing to a specific key/value inside of the configmap.  This is useful for logical file references.',
    )
    name: Optional[str] = None


class ServiceEndpoint(BaseModel):
    name: Optional[constr(regex=r'^[a-z0-9-]+$')] = Field(
        None,
        description='name is the name of the AWS service. The list of all the service names can be found at https://docs.aws.amazon.com/general/latest/gr/aws-service-information.html This must be provided and cannot be empty.',
    )
    url: Optional[constr(regex=r'^https://')] = Field(
        None,
        description='url is fully qualified URI with scheme https, that overrides the default generated endpoint for a client. This must be provided and cannot be empty.',
    )


class Aws(BaseModel):
    serviceEndpoints: Optional[List[ServiceEndpoint]] = Field(
        None,
        description='serviceEndpoints list contains custom endpoints which will override default service endpoint of AWS Services. There must be only one ServiceEndpoint for a service.',
    )


class TypeModel1(Enum):
    _ = ''
    AWS = 'AWS'
    Azure = 'Azure'
    BareMetal = 'BareMetal'
    GCP = 'GCP'
    Libvirt = 'Libvirt'
    OpenStack = 'OpenStack'
    None_ = 'None'
    VSphere = 'VSphere'
    oVirt = 'oVirt'
    IBMCloud = 'IBMCloud'
    KubeVirt = 'KubeVirt'


class PlatformSpec(BaseModel):
    aws: Optional[Aws] = Field(
        None,
        description='AWS contains settings specific to the Amazon Web Services infrastructure provider.',
    )
    azure: Optional[Dict[str, Any]] = Field(
        None,
        description='Azure contains settings specific to the Azure infrastructure provider.',
    )
    baremetal: Optional[Dict[str, Any]] = Field(
        None,
        description='BareMetal contains settings specific to the BareMetal platform.',
    )
    gcp: Optional[Dict[str, Any]] = Field(
        None,
        description='GCP contains settings specific to the Google Cloud Platform infrastructure provider.',
    )
    ibmcloud: Optional[Dict[str, Any]] = Field(
        None,
        description='IBMCloud contains settings specific to the IBMCloud infrastructure provider.',
    )
    kubevirt: Optional[Dict[str, Any]] = Field(
        None,
        description='Kubevirt contains settings specific to the kubevirt infrastructure provider.',
    )
    openstack: Optional[Dict[str, Any]] = Field(
        None,
        description='OpenStack contains settings specific to the OpenStack infrastructure provider.',
    )
    ovirt: Optional[Dict[str, Any]] = Field(
        None,
        description='Ovirt contains settings specific to the oVirt infrastructure provider.',
    )
    type: Optional[TypeModel1] = Field(
        None,
        description='type is the underlying infrastructure provider for the cluster. This value controls whether infrastructure automation such as service load balancers, dynamic volume provisioning, machine creation and deletion, and other integrations are enabled. If None, no infrastructure automation is enabled. Allowed values are "AWS", "Azure", "BareMetal", "GCP", "Libvirt", "OpenStack", "VSphere", "oVirt", "KubeVirt" and "None". Individual components may not support all platforms, and must handle unrecognized platforms as None if they do not support that platform.',
    )
    vsphere: Optional[Dict[str, Any]] = Field(
        None,
        description='VSphere contains settings specific to the VSphere infrastructure provider.',
    )


class SpecModel7(BaseModel):
    cloudConfig: Optional[CloudConfig] = Field(
        None,
        description='cloudConfig is a reference to a ConfigMap containing the cloud provider configuration file. This configuration file is used to configure the Kubernetes cloud provider integration when using the built-in cloud provider integration or the external cloud controller manager. The namespace for this config map is openshift-config. \n cloudConfig should only be consumed by the kube_cloud_config controller. The controller is responsible for using the user configuration in the spec for various platforms and combining that with the user provided ConfigMap in this field to create a stitched kube cloud config. The controller generates a ConfigMap `kube-cloud-config` in `openshift-config-managed` namespace with the kube cloud config is stored in `cloud.conf` key. All the clients are expected to use the generated ConfigMap only.',
    )
    platformSpec: Optional[PlatformSpec] = Field(
        None,
        description='platformSpec holds desired information specific to the underlying infrastructure provider.',
    )


class Platform(Enum):
    _ = ''
    AWS = 'AWS'
    Azure = 'Azure'
    BareMetal = 'BareMetal'
    GCP = 'GCP'
    Libvirt = 'Libvirt'
    OpenStack = 'OpenStack'
    None_ = 'None'
    VSphere = 'VSphere'
    oVirt = 'oVirt'
    IBMCloud = 'IBMCloud'
    KubeVirt = 'KubeVirt'


class ServiceEndpointModel(BaseModel):
    name: Optional[constr(regex=r'^[a-z0-9-]+$')] = Field(
        None,
        description='name is the name of the AWS service. The list of all the service names can be found at https://docs.aws.amazon.com/general/latest/gr/aws-service-information.html This must be provided and cannot be empty.',
    )
    url: Optional[constr(regex=r'^https://')] = Field(
        None,
        description='url is fully qualified URI with scheme https, that overrides the default generated endpoint for a client. This must be provided and cannot be empty.',
    )


class AwsModel(BaseModel):
    region: Optional[str] = Field(
        None,
        description='region holds the default AWS region for new AWS resources created by the cluster.',
    )
    serviceEndpoints: Optional[List[ServiceEndpointModel]] = Field(
        None,
        description='ServiceEndpoints list contains custom endpoints which will override default service endpoint of AWS Services. There must be only one ServiceEndpoint for a service.',
    )


class CloudName(Enum):
    _ = ''
    AzurePublicCloud = 'AzurePublicCloud'
    AzureUSGovernmentCloud = 'AzureUSGovernmentCloud'
    AzureChinaCloud = 'AzureChinaCloud'
    AzureGermanCloud = 'AzureGermanCloud'


class Azure(BaseModel):
    cloudName: Optional[CloudName] = Field(
        None,
        description='cloudName is the name of the Azure cloud environment which can be used to configure the Azure SDK with the appropriate Azure API endpoints. If empty, the value is equal to `AzurePublicCloud`.',
    )
    networkResourceGroupName: Optional[str] = Field(
        None,
        description='networkResourceGroupName is the Resource Group for network resources like the Virtual Network and Subnets used by the cluster. If empty, the value is same as ResourceGroupName.',
    )
    resourceGroupName: Optional[str] = Field(
        None,
        description='resourceGroupName is the Resource Group for new Azure resources created for the cluster.',
    )


class Baremetal(BaseModel):
    apiServerInternalIP: Optional[str] = Field(
        None,
        description='apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.',
    )
    ingressIP: Optional[str] = Field(
        None,
        description='ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.',
    )
    nodeDNSIP: Optional[str] = Field(
        None,
        description='nodeDNSIP is the IP address for the internal DNS used by the nodes. Unlike the one managed by the DNS operator, `NodeDNSIP` provides name resolution for the nodes themselves. There is no DNS-as-a-service for BareMetal deployments. In order to minimize necessary changes to the datacenter DNS, a DNS service is hosted as a static pod to serve those hostnames to the nodes in the cluster.',
    )


class Gcp(BaseModel):
    projectID: Optional[str] = Field(
        None,
        description='resourceGroupName is the Project ID for new GCP resources created for the cluster.',
    )
    region: Optional[str] = Field(
        None,
        description='region holds the region for new GCP resources created for the cluster.',
    )


class Ibmcloud(BaseModel):
    location: Optional[str] = Field(
        None, description='Location is where the cluster has been deployed'
    )
    providerType: Optional[str] = Field(
        None, description='ProviderType indicates the type of cluster that was created'
    )
    resourceGroupName: Optional[str] = Field(
        None,
        description='ResourceGroupName is the Resource Group for new IBMCloud resources created for the cluster.',
    )


class Kubevirt(BaseModel):
    apiServerInternalIP: Optional[str] = Field(
        None,
        description='apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.',
    )
    ingressIP: Optional[str] = Field(
        None,
        description='ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.',
    )


class Openstack(BaseModel):
    apiServerInternalIP: Optional[str] = Field(
        None,
        description='apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.',
    )
    cloudName: Optional[str] = Field(
        None,
        description='cloudName is the name of the desired OpenStack cloud in the client configuration file (`clouds.yaml`).',
    )
    ingressIP: Optional[str] = Field(
        None,
        description='ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.',
    )
    nodeDNSIP: Optional[str] = Field(
        None,
        description='nodeDNSIP is the IP address for the internal DNS used by the nodes. Unlike the one managed by the DNS operator, `NodeDNSIP` provides name resolution for the nodes themselves. There is no DNS-as-a-service for OpenStack deployments. In order to minimize necessary changes to the datacenter DNS, a DNS service is hosted as a static pod to serve those hostnames to the nodes in the cluster.',
    )


class Ovirt(BaseModel):
    apiServerInternalIP: Optional[str] = Field(
        None,
        description='apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.',
    )
    ingressIP: Optional[str] = Field(
        None,
        description='ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.',
    )
    nodeDNSIP: Optional[str] = Field(
        None,
        description='deprecated: as of 4.6, this field is no longer set or honored.  It will be removed in a future release.',
    )


class TypeModel2(Enum):
    _ = ''
    AWS = 'AWS'
    Azure = 'Azure'
    BareMetal = 'BareMetal'
    GCP = 'GCP'
    Libvirt = 'Libvirt'
    OpenStack = 'OpenStack'
    None_ = 'None'
    VSphere = 'VSphere'
    oVirt = 'oVirt'
    IBMCloud = 'IBMCloud'
    KubeVirt = 'KubeVirt'


class Vsphere(BaseModel):
    apiServerInternalIP: Optional[str] = Field(
        None,
        description='apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.',
    )
    ingressIP: Optional[str] = Field(
        None,
        description='ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.',
    )
    nodeDNSIP: Optional[str] = Field(
        None,
        description='nodeDNSIP is the IP address for the internal DNS used by the nodes. Unlike the one managed by the DNS operator, `NodeDNSIP` provides name resolution for the nodes themselves. There is no DNS-as-a-service for vSphere deployments. In order to minimize necessary changes to the datacenter DNS, a DNS service is hosted as a static pod to serve those hostnames to the nodes in the cluster.',
    )


class PlatformStatus(BaseModel):
    aws: Optional[AwsModel] = Field(
        None,
        description='AWS contains settings specific to the Amazon Web Services infrastructure provider.',
    )
    azure: Optional[Azure] = Field(
        None,
        description='Azure contains settings specific to the Azure infrastructure provider.',
    )
    baremetal: Optional[Baremetal] = Field(
        None,
        description='BareMetal contains settings specific to the BareMetal platform.',
    )
    gcp: Optional[Gcp] = Field(
        None,
        description='GCP contains settings specific to the Google Cloud Platform infrastructure provider.',
    )
    ibmcloud: Optional[Ibmcloud] = Field(
        None,
        description='IBMCloud contains settings specific to the IBMCloud infrastructure provider.',
    )
    kubevirt: Optional[Kubevirt] = Field(
        None,
        description='Kubevirt contains settings specific to the kubevirt infrastructure provider.',
    )
    openstack: Optional[Openstack] = Field(
        None,
        description='OpenStack contains settings specific to the OpenStack infrastructure provider.',
    )
    ovirt: Optional[Ovirt] = Field(
        None,
        description='Ovirt contains settings specific to the oVirt infrastructure provider.',
    )
    type: Optional[TypeModel2] = Field(
        None,
        description='type is the underlying infrastructure provider for the cluster. This value controls whether infrastructure automation such as service load balancers, dynamic volume provisioning, machine creation and deletion, and other integrations are enabled. If None, no infrastructure automation is enabled. Allowed values are "AWS", "Azure", "BareMetal", "GCP", "Libvirt", "OpenStack", "VSphere", "oVirt", and "None". Individual components may not support all platforms, and must handle unrecognized platforms as None if they do not support that platform. \n This value will be synced with to the `status.platform` and `status.platformStatus.type`. Currently this value cannot be changed once set.',
    )
    vsphere: Optional[Vsphere] = Field(
        None,
        description='VSphere contains settings specific to the VSphere infrastructure provider.',
    )


class StatusModel4(BaseModel):
    apiServerInternalURI: Optional[str] = Field(
        None,
        description="apiServerInternalURL is a valid URI with scheme 'https', address and optionally a port (defaulting to 443).  apiServerInternalURL can be used by components like kubelets, to contact the Kubernetes API server using the infrastructure provider rather than Kubernetes networking.",
    )
    apiServerURL: Optional[str] = Field(
        None,
        description="apiServerURL is a valid URI with scheme 'https', address and optionally a port (defaulting to 443).  apiServerURL can be used by components like the web console to tell users where to find the Kubernetes API.",
    )
    etcdDiscoveryDomain: Optional[str] = Field(
        None,
        description='etcdDiscoveryDomain is the domain used to fetch the SRV records for discovering etcd servers and clients. For more info: https://github.com/etcd-io/etcd/blob/329be66e8b3f9e2e6af83c123ff89297e49ebd15/Documentation/op-guide/clustering.md#dns-discovery deprecated: as of 4.7, this field is no longer set or honored.  It will be removed in a future release.',
    )
    infrastructureName: Optional[str] = Field(
        None,
        description='infrastructureName uniquely identifies a cluster with a human friendly name. Once set it should not be changed. Must be of max length 27 and must have only alphanumeric or hyphen characters.',
    )
    platform: Optional[Platform] = Field(
        None,
        description='platform is the underlying infrastructure provider for the cluster. \n Deprecated: Use platformStatus.type instead.',
    )
    platformStatus: Optional[PlatformStatus] = Field(
        None,
        description='platformStatus holds status information specific to the underlying infrastructure provider.',
    )


class SpecModel8(BaseModel):
    appsDomain: Optional[str] = Field(
        None,
        description='appsDomain is an optional domain to use instead of the one specified in the domain field when a Route is created without specifying an explicit host. If appsDomain is nonempty, this value is used to generate default host values for Route. Unlike domain, appsDomain may be modified after installation. This assumes a new ingresscontroller has been setup with a wildcard certificate.',
    )
    domain: Optional[str] = Field(
        None,
        description='domain is used to generate a default host name for a route when the route\'s host name is empty. The generated host name will follow this pattern: "<route-name>.<route-namespace>.<domain>". \n It is also used as the default wildcard domain suffix for ingress. The default ingresscontroller domain will follow this pattern: "*.<domain>". \n Once set, changing domain is not currently supported.',
    )


class ClusterNetworkItem(BaseModel):
    cidr: Optional[str] = Field(None, description='The complete block for pod IPs.')
    hostPrefix: Optional[conint(ge=0)] = Field(
        None,
        description='The size (prefix) of block to allocate to each node. If this field is not used by the plugin, it can be left unset.',
    )


class Policy(BaseModel):
    allowedCIDRs: Optional[List[str]] = Field(
        None, description='allowedCIDRs is the list of allowed CIDRs.'
    )
    rejectedCIDRs: Optional[List[str]] = Field(
        None,
        description='rejectedCIDRs is the list of disallowed CIDRs. These take precedence over allowedCIDRs.',
    )


class ExternalIP(BaseModel):
    autoAssignCIDRs: Optional[List[str]] = Field(
        None,
        description='autoAssignCIDRs is a list of CIDRs from which to automatically assign Service.ExternalIP. These are assigned when the service is of type LoadBalancer. In general, this is only useful for bare-metal clusters. In Openshift 3.x, this was misleadingly called "IngressIPs". Automatically assigned External IPs are not affected by any ExternalIPPolicy rules. Currently, only one entry may be provided.',
    )
    policy: Optional[Policy] = Field(
        None,
        description='policy is a set of restrictions applied to the ExternalIP field. If nil or empty, then ExternalIP is not allowed to be set.',
    )


class SpecModel9(BaseModel):
    clusterNetwork: Optional[List[ClusterNetworkItem]] = Field(
        None,
        description='IP address pool to use for pod IPs. This field is immutable after installation.',
    )
    externalIP: Optional[ExternalIP] = Field(
        None,
        description='externalIP defines configuration for controllers that affect Service.ExternalIP. If nil, then ExternalIP is not allowed to be set.',
    )
    networkType: Optional[str] = Field(
        None,
        description='NetworkType is the plugin that is to be deployed (e.g. OpenShiftSDN). This should match a value that the cluster-network-operator understands, or else no networking will be installed. Currently supported values are: - OpenShiftSDN This field is immutable after installation.',
    )
    serviceNetwork: Optional[List[str]] = Field(
        None,
        description='IP address pool for services. Currently, we only support a single entry here. This field is immutable after installation.',
    )
    serviceNodePortRange: Optional[
        constr(
            regex=r'^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])-([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$'
        )
    ] = Field(
        None,
        description='The port range allowed for Services of type NodePort. If not specified, the default of 30000-32767 will be used. Such Services without a NodePort specified will have one automatically allocated from this range. This parameter can be updated after the cluster is installed.',
    )


class ClusterNetworkItemModel(BaseModel):
    cidr: Optional[str] = Field(None, description='The complete block for pod IPs.')
    hostPrefix: Optional[conint(ge=0)] = Field(
        None,
        description='The size (prefix) of block to allocate to each node. If this field is not used by the plugin, it can be left unset.',
    )


class StatusModel5(BaseModel):
    clusterNetwork: Optional[List[ClusterNetworkItemModel]] = Field(
        None, description='IP address pool to use for pod IPs.'
    )
    clusterNetworkMTU: Optional[int] = Field(
        None, description='ClusterNetworkMTU is the MTU for inter-pod networking.'
    )
    networkType: Optional[str] = Field(
        None,
        description='NetworkType is the plugin that is deployed (e.g. OpenShiftSDN).',
    )
    serviceNetwork: Optional[List[str]] = Field(
        None,
        description='IP address pool for services. Currently, we only support a single entry here.',
    )


class Ca(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class TlsClientCert(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class TlsClientKey(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class BasicAuth(BaseModel):
    ca: Optional[Ca] = Field(
        None,
        description='ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.',
    )
    tlsClientCert: Optional[TlsClientCert] = Field(
        None,
        description='tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.',
    )
    tlsClientKey: Optional[TlsClientKey] = Field(
        None,
        description='tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.',
    )
    url: Optional[str] = Field(None, description='url is the remote URL to connect to')


class CaModel(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class ClientSecret(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class Github(BaseModel):
    ca: Optional[CaModel] = Field(
        None,
        description='ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.',
    )
    clientID: Optional[str] = Field(None, description='clientID is the oauth client ID')
    clientSecret: Optional[ClientSecret] = Field(
        None,
        description='clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.',
    )
    hostname: Optional[str] = Field(
        None,
        description='hostname is the optional domain (e.g. "mycompany.com") for use with a hosted instance of GitHub Enterprise. It must match the GitHub Enterprise settings value configured at /setup/settings#hostname.',
    )
    organizations: Optional[List[str]] = Field(
        None,
        description='organizations optionally restricts which organizations are allowed to log in',
    )
    teams: Optional[List[str]] = Field(
        None,
        description='teams optionally restricts which teams are allowed to log in. Format is <org>/<team>.',
    )


class CaModel1(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class ClientSecretModel(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class Gitlab(BaseModel):
    ca: Optional[CaModel1] = Field(
        None,
        description='ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.',
    )
    clientID: Optional[str] = Field(None, description='clientID is the oauth client ID')
    clientSecret: Optional[ClientSecretModel] = Field(
        None,
        description='clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.',
    )
    url: Optional[str] = Field(None, description='url is the oauth server base URL')


class ClientSecretModel1(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class Google(BaseModel):
    clientID: Optional[str] = Field(None, description='clientID is the oauth client ID')
    clientSecret: Optional[ClientSecretModel1] = Field(
        None,
        description='clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.',
    )
    hostedDomain: Optional[str] = Field(
        None,
        description='hostedDomain is the optional Google App domain (e.g. "mycompany.com") to restrict logins to',
    )


class FileData(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class Htpasswd(BaseModel):
    fileData: Optional[FileData] = Field(
        None,
        description='fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.',
    )


class CaModel2(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class TlsClientCertModel(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class TlsClientKeyModel(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class Keystone(BaseModel):
    ca: Optional[CaModel2] = Field(
        None,
        description='ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.',
    )
    domainName: Optional[str] = Field(
        None, description='domainName is required for keystone v3'
    )
    tlsClientCert: Optional[TlsClientCertModel] = Field(
        None,
        description='tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.',
    )
    tlsClientKey: Optional[TlsClientKeyModel] = Field(
        None,
        description='tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.',
    )
    url: Optional[str] = Field(None, description='url is the remote URL to connect to')


class Attributes(BaseModel):
    email: Optional[List[str]] = Field(
        None,
        description='email is the list of attributes whose values should be used as the email address. Optional. If unspecified, no email is set for the identity',
    )
    id: Optional[List[str]] = Field(
        None,
        description='id is the list of attributes whose values should be used as the user ID. Required. First non-empty attribute is used. At least one attribute is required. If none of the listed attribute have a value, authentication fails. LDAP standard identity attribute is "dn"',
    )
    name: Optional[List[str]] = Field(
        None,
        description='name is the list of attributes whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity LDAP standard display name attribute is "cn"',
    )
    preferredUsername: Optional[List[str]] = Field(
        None,
        description='preferredUsername is the list of attributes whose values should be used as the preferred username. LDAP standard login attribute is "uid"',
    )


class BindPassword(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class CaModel3(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class Ldap(BaseModel):
    attributes: Optional[Attributes] = Field(
        None, description='attributes maps LDAP attributes to identities'
    )
    bindDN: Optional[str] = Field(
        None,
        description='bindDN is an optional DN to bind with during the search phase.',
    )
    bindPassword: Optional[BindPassword] = Field(
        None,
        description='bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.',
    )
    ca: Optional[CaModel3] = Field(
        None,
        description='ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.',
    )
    insecure: Optional[bool] = Field(
        None,
        description='insecure, if true, indicates the connection should not use TLS WARNING: Should not be set to `true` with the URL scheme "ldaps://" as "ldaps://" URLs always          attempt to connect using TLS, even when `insecure` is set to `true` When `true`, "ldap://" URLS connect insecurely. When `false`, "ldap://" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830.',
    )
    url: Optional[str] = Field(
        None,
        description='url is an RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter',
    )


class CaModel4(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class Claims(BaseModel):
    email: Optional[List[str]] = Field(
        None,
        description='email is the list of claims whose values should be used as the email address. Optional. If unspecified, no email is set for the identity',
    )
    name: Optional[List[str]] = Field(
        None,
        description='name is the list of claims whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity',
    )
    preferredUsername: Optional[List[str]] = Field(
        None,
        description='preferredUsername is the list of claims whose values should be used as the preferred username. If unspecified, the preferred username is determined from the value of the sub claim',
    )


class ClientSecretModel2(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class OpenID(BaseModel):
    ca: Optional[CaModel4] = Field(
        None,
        description='ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.',
    )
    claims: Optional[Claims] = Field(None, description='claims mappings')
    clientID: Optional[str] = Field(None, description='clientID is the oauth client ID')
    clientSecret: Optional[ClientSecretModel2] = Field(
        None,
        description='clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.',
    )
    extraAuthorizeParameters: Optional[Dict[str, str]] = Field(
        None,
        description='extraAuthorizeParameters are any custom parameters to add to the authorize request.',
    )
    extraScopes: Optional[List[str]] = Field(
        None,
        description='extraScopes are any scopes to request in addition to the standard "openid" scope.',
    )
    issuer: Optional[str] = Field(
        None,
        description='issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.',
    )


class CaModel5(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class RequestHeader(BaseModel):
    ca: Optional[CaModel5] = Field(
        None,
        description='ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.',
    )
    challengeURL: Optional[str] = Field(
        None,
        description='challengeURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here. ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when challenge is set to true.',
    )
    clientCommonNames: Optional[List[str]] = Field(
        None,
        description='clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.',
    )
    emailHeaders: Optional[List[str]] = Field(
        None,
        description='emailHeaders is the set of headers to check for the email address',
    )
    headers: Optional[List[str]] = Field(
        None,
        description='headers is the set of headers to check for identity information',
    )
    loginURL: Optional[str] = Field(
        None,
        description='loginURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when login is set to true.',
    )
    nameHeaders: Optional[List[str]] = Field(
        None,
        description='nameHeaders is the set of headers to check for the display name',
    )
    preferredUsernameHeaders: Optional[List[str]] = Field(
        None,
        description='preferredUsernameHeaders is the set of headers to check for the preferred username',
    )


class IdentityProvider(BaseModel):
    basicAuth: Optional[BasicAuth] = Field(
        None,
        description='basicAuth contains configuration options for the BasicAuth IdP',
    )
    github: Optional[Github] = Field(
        None, description='github enables user authentication using GitHub credentials'
    )
    gitlab: Optional[Gitlab] = Field(
        None, description='gitlab enables user authentication using GitLab credentials'
    )
    google: Optional[Google] = Field(
        None, description='google enables user authentication using Google credentials'
    )
    htpasswd: Optional[Htpasswd] = Field(
        None,
        description='htpasswd enables user authentication using an HTPasswd file to validate credentials',
    )
    keystone: Optional[Keystone] = Field(
        None,
        description='keystone enables user authentication using keystone password credentials',
    )
    ldap: Optional[Ldap] = Field(
        None, description='ldap enables user authentication using LDAP credentials'
    )
    mappingMethod: Optional[str] = Field(
        None,
        description='mappingMethod determines how identities from this provider are mapped to users Defaults to "claim"',
    )
    name: Optional[str] = Field(
        None,
        description='name is used to qualify the identities returned by this provider. - It MUST be unique and not shared by any other identity provider used - It MUST be a valid path segment: name cannot equal "." or ".." or contain "/" or "%" or ":"   Ref: https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName',
    )
    openID: Optional[OpenID] = Field(
        None, description='openID enables user authentication using OpenID credentials'
    )
    requestHeader: Optional[RequestHeader] = Field(
        None,
        description='requestHeader enables user authentication using request header credentials',
    )
    type: Optional[str] = Field(
        None, description='type identifies the identity provider type for this entry.'
    )


class Error(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class Login(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class ProviderSelection(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class Templates(BaseModel):
    error: Optional[Error] = Field(
        None,
        description='error is the name of a secret that specifies a go template to use to render error pages during the authentication or grant flow. The key "errors.html" is used to locate the template data. If specified and the secret or expected key is not found, the default error page is used. If the specified template is not valid, the default error page is used. If unspecified, the default error page is used. The namespace for this secret is openshift-config.',
    )
    login: Optional[Login] = Field(
        None,
        description='login is the name of a secret that specifies a go template to use to render the login page. The key "login.html" is used to locate the template data. If specified and the secret or expected key is not found, the default login page is used. If the specified template is not valid, the default login page is used. If unspecified, the default login page is used. The namespace for this secret is openshift-config.',
    )
    providerSelection: Optional[ProviderSelection] = Field(
        None,
        description='providerSelection is the name of a secret that specifies a go template to use to render the provider selection page. The key "providers.html" is used to locate the template data. If specified and the secret or expected key is not found, the default provider selection page is used. If the specified template is not valid, the default provider selection page is used. If unspecified, the default provider selection page is used. The namespace for this secret is openshift-config.',
    )


class TokenConfig(BaseModel):
    accessTokenInactivityTimeout: Optional[str] = Field(
        None,
        description='accessTokenInactivityTimeout defines the token inactivity timeout for tokens granted by any client. The value represents the maximum amount of time that can occur between consecutive uses of the token. Tokens become invalid if they are not used within this temporal window. The user will need to acquire a new token to regain access once a token times out. Takes valid time duration string such as "5m", "1.5h" or "2h45m". The minimum allowed value for duration is 300s (5 minutes). If the timeout is configured per client, then that value takes precedence. If the timeout value is not specified and the client does not override the value, then tokens are valid until their lifetime.',
    )
    accessTokenInactivityTimeoutSeconds: Optional[int] = Field(
        None,
        description='accessTokenInactivityTimeoutSeconds - DEPRECATED: setting this field has no effect.',
    )
    accessTokenMaxAgeSeconds: Optional[int] = Field(
        None,
        description='accessTokenMaxAgeSeconds defines the maximum age of access tokens',
    )


class SpecModel10(BaseModel):
    identityProviders: Optional[List[IdentityProvider]] = Field(
        None,
        description='identityProviders is an ordered list of ways for a user to identify themselves. When this list is empty, no identities are provisioned for users.',
    )
    templates: Optional[Templates] = Field(
        None, description='templates allow you to customize pages like the login page.'
    )
    tokenConfig: Optional[TokenConfig] = Field(
        None,
        description='tokenConfig contains options for authorization and access tokens',
    )


class Source(BaseModel):
    disabled: Optional[bool] = Field(
        None, description='disabled is used to disable a default hub source on cluster'
    )
    name: Optional[constr(min_length=1, max_length=253)] = Field(
        None, description='name is the name of one of the default hub sources'
    )


class SpecModel11(BaseModel):
    disableAllDefaultSources: Optional[bool] = Field(
        None,
        description='disableAllDefaultSources allows you to disable all the default hub sources. If this is true, a specific entry in sources can be used to enable a default source. If this is false, a specific entry in sources can be used to disable or enable a default source.',
    )
    sources: Optional[List[Source]] = Field(
        None,
        description='sources is the list of default hub sources and their configuration. If the list is empty, it implies that the default hub sources are enabled on the cluster unless disableAllDefaultSources is true. If disableAllDefaultSources is true and sources is not empty, the configuration present in sources will take precedence. The list of default hub sources and their current state will always be reflected in the status block.',
    )


class SourceModel(BaseModel):
    disabled: Optional[bool] = Field(
        None, description='disabled is used to disable a default hub source on cluster'
    )
    message: Optional[str] = Field(
        None, description='message provides more information regarding failures'
    )
    name: Optional[constr(min_length=1, max_length=253)] = Field(
        None, description='name is the name of one of the default hub sources'
    )
    status: Optional[str] = Field(
        None,
        description='status indicates success or failure in applying the configuration',
    )


class StatusModel6(BaseModel):
    sources: Optional[List[SourceModel]] = Field(
        None,
        description='sources encapsulates the result of applying the configuration for each hub source',
    )


class ProjectRequestTemplate(BaseModel):
    name: Optional[str] = Field(
        None,
        description='name is the metadata.name of the referenced project request template',
    )


class SpecModel12(BaseModel):
    projectRequestMessage: Optional[str] = Field(
        None,
        description='projectRequestMessage is the string presented to a user if they are unable to request a project via the projectrequest api endpoint',
    )
    projectRequestTemplate: Optional[ProjectRequestTemplate] = Field(
        None,
        description="projectRequestTemplate is the template to use for creating projects in response to projectrequest. This must point to a template in 'openshift-config' namespace. It is optional. If it is not specified, a default template is used.",
    )


class TrustedCAModel1(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class SpecModel13(BaseModel):
    httpProxy: Optional[str] = Field(
        None,
        description='httpProxy is the URL of the proxy for HTTP requests.  Empty means unset and will not result in an env var.',
    )
    httpsProxy: Optional[str] = Field(
        None,
        description='httpsProxy is the URL of the proxy for HTTPS requests.  Empty means unset and will not result in an env var.',
    )
    noProxy: Optional[str] = Field(
        None,
        description='noProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Empty means unset and will not result in an env var.',
    )
    readinessEndpoints: Optional[List[str]] = Field(
        None,
        description='readinessEndpoints is a list of endpoints used to verify readiness of the proxy.',
    )
    trustedCA: Optional[TrustedCAModel1] = Field(
        None,
        description='trustedCA is a reference to a ConfigMap containing a CA certificate bundle. The trustedCA field should only be consumed by a proxy validator. The validator is responsible for reading the certificate bundle from the required key "ca-bundle.crt", merging it with the system default trust bundle, and writing the merged trust bundle to a ConfigMap named "trusted-ca-bundle" in the "openshift-config-managed" namespace. Clients that expect to make proxy connections must use the trusted-ca-bundle for all HTTPS requests to the proxy, and may use the trusted-ca-bundle for non-proxy HTTPS requests as well. \n The namespace for the ConfigMap referenced by trustedCA is "openshift-config". Here is an example ConfigMap (in yaml): \n apiVersion: v1 kind: ConfigMap metadata:  name: user-ca-bundle  namespace: openshift-config  data:    ca-bundle.crt: |      -----BEGIN CERTIFICATE-----      Custom CA certificate bundle.      -----END CERTIFICATE-----',
    )


class StatusModel7(BaseModel):
    httpProxy: Optional[str] = Field(
        None, description='httpProxy is the URL of the proxy for HTTP requests.'
    )
    httpsProxy: Optional[str] = Field(
        None, description='httpsProxy is the URL of the proxy for HTTPS requests.'
    )
    noProxy: Optional[str] = Field(
        None,
        description='noProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used.',
    )


class PolicyModel(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class ProfileModel(Enum):
    _ = ''
    LowNodeUtilization = 'LowNodeUtilization'
    HighNodeUtilization = 'HighNodeUtilization'
    NoScoring = 'NoScoring'


class SpecModel14(BaseModel):
    defaultNodeSelector: Optional[str] = Field(
        None,
        description='defaultNodeSelector helps set the cluster-wide default node selector to restrict pod placement to specific nodes. This is applied to the pods created in all namespaces and creates an intersection with any existing nodeSelectors already set on a pod, additionally constraining that pod\'s selector. For example, defaultNodeSelector: "type=user-node,region=east" would set nodeSelector field in pod spec to "type=user-node,region=east" to all pods created in all namespaces. Namespaces having project-wide node selectors won\'t be impacted even if this field is set. This adds an annotation section to the namespace. For example, if a new namespace is created with node-selector=\'type=user-node,region=east\', the annotation openshift.io/node-selector: type=user-node,region=east gets added to the project. When the openshift.io/node-selector annotation is set on the project the value is used in preference to the value we are setting for defaultNodeSelector field. For instance, openshift.io/node-selector: "type=user-node,region=west" means that the default of "type=user-node,region=east" set in defaultNodeSelector would not be applied.',
    )
    mastersSchedulable: Optional[bool] = Field(
        None,
        description='MastersSchedulable allows masters nodes to be schedulable. When this flag is turned on, all the master nodes in the cluster will be made schedulable, so that workload pods can run on them. The default value for this field is false, meaning none of the master nodes are schedulable. Important Note: Once the workload pods start running on the master nodes, extreme care must be taken to ensure that cluster-critical control plane components are not impacted. Please turn on this field after doing due diligence.',
    )
    policy: Optional[PolicyModel] = Field(
        None,
        description='DEPRECATED: the scheduler Policy API has been deprecated and will be removed in a future release. policy is a reference to a ConfigMap containing scheduler policy which has user specified predicates and priorities. If this ConfigMap is not available scheduler will default to use DefaultAlgorithmProvider. The namespace for this configmap is openshift-config.',
    )
    profile: Optional[ProfileModel] = Field(
        None,
        description='profile sets which scheduling profile should be set in order to configure scheduling decisions for new pods. \n Valid values are "LowNodeUtilization", "HighNodeUtilization", "NoScoring" Defaults to "LowNodeUtilization"',
    )


class APIServer(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Spec = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[Dict[str, Any]] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class APIServerList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[APIServer] = Field(
        ...,
        description='List of apiservers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class AuthenticationModel(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[Status] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class AuthenticationList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[AuthenticationModel] = Field(
        ...,
        description='List of authentications. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Build(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel1 = Field(
        ...,
        description='Spec holds user-settable values for the build controller configuration',
    )


class BuildList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Build] = Field(
        ...,
        description='List of builds. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class ClusterOperator(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Dict[str, Any] = Field(
        ..., description='spec holds configuration that could apply to any operator.'
    )
    status: Optional[StatusModel] = Field(
        None,
        description='status holds the information about the state of an operator.  It is consistent with status information across the Kubernetes ecosystem.',
    )


class ClusterOperatorList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ClusterOperator] = Field(
        ...,
        description='List of clusteroperators. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class ClusterVersion(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel2 = Field(
        ...,
        description='spec is the desired state of the cluster version - the operator will work to ensure that the desired version is applied to the cluster.',
    )
    status: Optional[StatusModel1] = Field(
        None,
        description='status contains information about the available updates and any in-progress updates.',
    )


class ClusterVersionList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ClusterVersion] = Field(
        ...,
        description='List of clusterversions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Console(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel3 = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[StatusModel2] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class ConsoleList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Console] = Field(
        ...,
        description='List of consoles. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class DNS(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel4 = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[Dict[str, Any]] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class DNSList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[DNS] = Field(
        ...,
        description='List of dnses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class FeatureGate(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel5 = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[Dict[str, Any]] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class FeatureGateList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[FeatureGate] = Field(
        ...,
        description='List of featuregates. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Image(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel6 = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[StatusModel3] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class ImageList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Image] = Field(
        ...,
        description='List of images. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Infrastructure(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel7 = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[StatusModel4] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class InfrastructureList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Infrastructure] = Field(
        ...,
        description='List of infrastructures. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Ingress(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel8 = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[Dict[str, Any]] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class IngressList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Ingress] = Field(
        ...,
        description='List of ingresses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Network(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel9 = Field(
        ...,
        description='spec holds user settable values for configuration. As a general rule, this SHOULD NOT be read directly. Instead, you should consume the NetworkStatus, as it indicates the currently deployed configuration. Currently, most spec fields are immutable after installation. Please view the individual ones for further details on each.',
    )
    status: Optional[StatusModel5] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class NetworkList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Network] = Field(
        ...,
        description='List of networks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class OAuth(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel10 = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[Dict[str, Any]] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class OAuthList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[OAuth] = Field(
        ...,
        description='List of oauths. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class OperatorHub(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel11] = Field(
        None, description='OperatorHubSpec defines the desired state of OperatorHub'
    )
    status: Optional[StatusModel6] = Field(
        None,
        description='OperatorHubStatus defines the observed state of OperatorHub. The current state of the default hub sources will always be reflected here.',
    )


class OperatorHubList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[OperatorHub] = Field(
        ...,
        description='List of operatorhubs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Project(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel12 = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[Dict[str, Any]] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class ProjectList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Project] = Field(
        ...,
        description='List of projects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Proxy(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel13 = Field(
        ..., description='Spec holds user-settable values for the proxy configuration'
    )
    status: Optional[StatusModel7] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class ProxyList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Proxy] = Field(
        ...,
        description='List of proxies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Scheduler(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel14 = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[Dict[str, Any]] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class SchedulerList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Scheduler] = Field(
        ...,
        description='List of schedulers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
