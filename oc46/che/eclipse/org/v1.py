# generated by datamodel-codegen:
#   filename:  openapi-v2.json
#   timestamp: 2021-04-29T07:54:09+00:00

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, Field

from ....io.k8s.apimachinery.pkg.apis.meta import v1


class Limits(BaseModel):
    cpu: Optional[str] = Field(None, description='CPU, in cores. (500m = .5 cores)')
    memory: Optional[str] = Field(
        None,
        description='Memory, in bytes. (500Gi = 500GiB = 500 * 1024 * 1024 * 1024)',
    )


class Request(BaseModel):
    cpu: Optional[str] = Field(None, description='CPU, in cores. (500m = .5 cores)')
    memory: Optional[str] = Field(
        None,
        description='Memory, in bytes. (500Gi = 500GiB = 500 * 1024 * 1024 * 1024)',
    )


class IdentityProviderContainerResources(BaseModel):
    limits: Optional[Limits] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed.',
    )
    request: Optional[Request] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required.',
    )


class IdentityProviderIngress(BaseModel):
    labels: Optional[str] = Field(
        None,
        description='Comma separated list of labels that can be used to organize and categorize objects by scoping and selecting.',
    )


class IdentityProviderRoute(BaseModel):
    labels: Optional[str] = Field(
        None,
        description='Comma separated list of labels that can be used to organize and categorize objects by scoping and selecting.',
    )


class Auth(BaseModel):
    externalIdentityProvider: Optional[bool] = Field(
        None,
        description='Instructs the Operator on whether to deploy a dedicated Identity Provider (Keycloak or RH-SSO instance). By default, a dedicated Identity Provider server is deployed as part of the Che installation. When `externalIdentityProvider` is `true`, no dedicated identity provider will be deployed by the Operator and you will need to provide details about the external identity provider you are about to use. See also all the other fields starting with: `identityProvider`.',
    )
    identityProviderAdminUserName: Optional[str] = Field(
        None,
        description='Overrides the name of the Identity Provider administrator user. Defaults to `admin`.',
    )
    identityProviderClientId: Optional[str] = Field(
        None,
        description='Name of a Identity provider, Keycloak or RH-SSO, `client-id` that is used for Che. This is useful to override it ONLY if you use an external Identity Provider. See the `externalIdentityProvider` field. When omitted or left blank, it is set to the value of the `flavour` field suffixed with `-public`.',
    )
    identityProviderContainerResources: Optional[
        IdentityProviderContainerResources
    ] = Field(None, description='Identity provider container custom settings.')
    identityProviderImage: Optional[str] = Field(
        None,
        description='Overrides the container image used in the Identity Provider, Keycloak or RH-SSO, deployment. This includes the image tag. Omit it or leave it empty to use the default container image provided by the Operator.',
    )
    identityProviderImagePullPolicy: Optional[str] = Field(
        None,
        description='Overrides the image pull policy used in the Identity Provider, Keycloak or RH-SSO, deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.',
    )
    identityProviderIngress: Optional[IdentityProviderIngress] = Field(
        None, description='Ingress custom settings.'
    )
    identityProviderPassword: Optional[str] = Field(
        None,
        description='Overrides the password of Keycloak administrator user. This is useful to override it ONLY if you use an external Identity Provider. See the `externalIdentityProvider` field. When omitted or left blank, it is set to an auto-generated password.',
    )
    identityProviderPostgresPassword: Optional[str] = Field(
        None,
        description='Password for a Identity Provider, Keycloak or RH-SSO, to connect to the database. This is useful to override it ONLY if you use an external Identity Provider. See the `externalIdentityProvider` field. When omitted or left blank, it is set to an auto-generated password.',
    )
    identityProviderPostgresSecret: Optional[str] = Field(
        None,
        description='The secret that contains `password` for the Identity Provider, Keycloak or RH-SSO, to connect to the database. When the secret is defined, the `identityProviderPostgresPassword` is ignored. When the value is omitted or left blank, the one of following scenarios applies: 1. `identityProviderPostgresPassword` is defined, then it will be used to connect to the database. 2. `identityProviderPostgresPassword` is not defined, then a new secret with the name `che-identity-postgres-secret` will be created with an auto-generated value for `password`.',
    )
    identityProviderRealm: Optional[str] = Field(
        None,
        description='Name of a Identity provider, Keycloak or RH-SSO, realm that is used for Che. This is useful to override it ONLY if you use an external Identity Provider. See the `externalIdentityProvider` field. When omitted or left blank, it is set to the value of the `flavour` field.',
    )
    identityProviderRoute: Optional[IdentityProviderRoute] = Field(
        None, description='Route custom settings.'
    )
    identityProviderSecret: Optional[str] = Field(
        None,
        description='The secret that contains `user` and `password` for Identity Provider. When the secret is defined, the `identityProviderAdminUserName` and `identityProviderPassword` are ignored. When the value is omitted or left blank, the one of following scenarios applies: 1. `identityProviderAdminUserName` and `identityProviderPassword` are defined, then they will be used. 2. `identityProviderAdminUserName` or `identityProviderPassword` are not defined, then a new secret with the name `che-identity-secret` will be created with default value `admin` for `user` and with an auto-generated value for `password`.',
    )
    identityProviderURL: Optional[str] = Field(
        None,
        description='Public URL of the Identity Provider server (Keycloak / RH-SSO server). Set this ONLY when a use of an external Identity Provider is needed. See the `externalIdentityProvider` field. By default, this will be automatically calculated and set by the Operator.',
    )
    oAuthClientName: Optional[str] = Field(
        None,
        description='Name of the OpenShift `OAuthClient` resource used to setup identity federation on the OpenShift side. Auto-generated if left blank. See also the `OpenShiftoAuth` field.',
    )
    oAuthSecret: Optional[str] = Field(
        None,
        description='Name of the secret set in the OpenShift `OAuthClient` resource used to setup identity federation on the OpenShift side. Auto-generated if left blank. See also the `OAuthClientName` field.',
    )
    openShiftoAuth: Optional[bool] = Field(
        None,
        description='Enables the integration of the identity provider (Keycloak / RHSSO) with OpenShift OAuth. Empty value on OpenShift by default. This will allow users to directly login with their OpenShift user through the OpenShift login, and have their workspaces created under personal OpenShift namespaces. WARNING: the `kubeadmin` user is NOT supported, and logging through it will NOT allow accessing the Che Dashboard.',
    )
    updateAdminPassword: Optional[bool] = Field(
        None,
        description='Forces the default `admin` Che user to update password on first login. Defaults to `false`.',
    )


class LimitsModel(BaseModel):
    cpu: Optional[str] = Field(None, description='CPU, in cores. (500m = .5 cores)')
    memory: Optional[str] = Field(
        None,
        description='Memory, in bytes. (500Gi = 500GiB = 500 * 1024 * 1024 * 1024)',
    )


class RequestModel(BaseModel):
    cpu: Optional[str] = Field(None, description='CPU, in cores. (500m = .5 cores)')
    memory: Optional[str] = Field(
        None,
        description='Memory, in bytes. (500Gi = 500GiB = 500 * 1024 * 1024 * 1024)',
    )


class ChePostgresContainerResources(BaseModel):
    limits: Optional[LimitsModel] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed.',
    )
    request: Optional[RequestModel] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required.',
    )


class Database(BaseModel):
    chePostgresContainerResources: Optional[ChePostgresContainerResources] = Field(
        None, description='PostgreSQL container custom settings'
    )
    chePostgresDb: Optional[str] = Field(
        None,
        description='PostgreSQL database name that the Che server uses to connect to the DB. Defaults to `dbche`.',
    )
    chePostgresHostName: Optional[str] = Field(
        None,
        description='PostgreSQL Database host name that the Che server uses to connect to. Defaults to postgres. Override this value ONLY when using an external database. See field `externalDb`. In the default case it will be automatically set by the Operator.',
    )
    chePostgresPassword: Optional[str] = Field(
        None,
        description='PostgreSQL password that the Che server uses to connect to the DB. When omitted or left blank, it will be set to an automatically generated value.',
    )
    chePostgresPort: Optional[str] = Field(
        None,
        description='PostgreSQL Database port that the Che server uses to connect to. Defaults to 5432. Override this value ONLY when using an external database. See field `externalDb`. In the default case it will be automatically set by the Operator.',
    )
    chePostgresSecret: Optional[str] = Field(
        None,
        description='The secret that contains PosgreSQL`user` and `password` that the Che server uses to connect to the DB. When the secret is defined, the `chePostgresUser` and `chePostgresPassword` are ignored. When the value is omitted or left blank, the one of following scenarios applies: 1. `chePostgresUser` and `chePostgresPassword` are defined, then they will be used to connect to the DB. 2. `chePostgresUser` or `chePostgresPassword` are not defined, then a new secret with the name `che-postgres-secret` will be created with default value of `pgche` for `user` and with an auto-generated value for `password`.',
    )
    chePostgresUser: Optional[str] = Field(
        None,
        description='PostgreSQL user that the Che server uses to connect to the DB. Defaults to `pgche`.',
    )
    externalDb: Optional[bool] = Field(
        None,
        description='Instructs the Operator on whether to deploy a dedicated database. By default, a dedicated PostgreSQL database is deployed as part of the Che installation. When `externalDb` is `true`, no dedicated database will be deployed by the Operator and you will need to provide connection details to the external DB you are about to use. See also all the fields starting with: `chePostgres`.',
    )
    postgresImage: Optional[str] = Field(
        None,
        description='Overrides the container image used in the PosgreSQL database deployment. This includes the image tag. Omit it or leave it empty to use the default container image provided by the Operator.',
    )
    postgresImagePullPolicy: Optional[str] = Field(
        None,
        description='Overrides the image pull policy used in the PosgreSQL database deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.',
    )


class Spec(BaseModel):
    cachingCPULimit: Optional[str] = None
    cachingCPURequest: Optional[str] = None
    cachingIntervalHours: Optional[str] = None
    cachingMemoryLimit: Optional[str] = None
    cachingMemoryRequest: Optional[str] = None
    configMapName: Optional[str] = None
    daemonsetName: Optional[str] = None
    deploymentName: Optional[str] = None
    images: Optional[str] = None
    nodeSelector: Optional[str] = None


class ImagePuller(BaseModel):
    enable: Optional[bool] = Field(
        None,
        description='Install and configure the Community Supported Kubernetes Image Puller Operator. If true and no spec is provided, it will create a default KubernetesImagePuller object to be managed by the Operator. If false, the KubernetesImagePuller object will be deleted, and the Operator will be uninstalled, regardless of whether a spec is provided. \n Note that while this the Operator and its behavior is community-supported, its payload may be commercially-supported if you use it for pulling commercially-supported images.',
    )
    spec: Optional[Spec] = Field(
        None,
        description='A KubernetesImagePullerSpec to configure the image puller in the CheCluster',
    )


class K8s(BaseModel):
    ingressClass: Optional[str] = Field(
        None,
        description='Ingress class that will define the which controller will manage ingresses. Defaults to `nginx`. NB: This drives the `kubernetes.io/ingress.class` annotation on Che-related ingresses.',
    )
    ingressDomain: Optional[str] = Field(
        None,
        description='Global ingress domain for a K8S cluster. This MUST be explicitly specified: there are no defaults.',
    )
    ingressStrategy: Optional[str] = Field(
        None,
        description='Strategy for ingress creation. Options are: `multi-host` (host is explicitly provided in ingress), `single-host` (host is provided, path-based rules) and `default-host` (no host is provided, path-based rules). Defaults to `multi-host` Deprecated in favor of `serverExposureStrategy` in the `server` section, which defines this regardless of the cluster type. When both are defined, the `serverExposureStrategy` option takes precedence.',
    )
    securityContextFsGroup: Optional[str] = Field(
        None,
        description='The FSGroup in which the Che Pod and workspace Pods containers runs in. Default value is `1724`.',
    )
    securityContextRunAsUser: Optional[str] = Field(
        None,
        description='ID of the user the Che Pod and workspace Pods containers run as. Default value is `1724`.',
    )
    singleHostExposureType: Optional[str] = Field(
        None,
        description='When the serverExposureStrategy is set to `single-host`, the way the server, registries and workspaces are exposed is further configured by this property. The possible values are `native`, which means that the server and workspaces are exposed using ingresses on K8s or `gateway` where the server and workspaces are exposed using a custom gateway based on Traefik. All the endpoints whether backed by the ingress or gateway `route` always point to the subpaths on the same domain. Defaults to `native`.',
    )
    tlsSecretName: Optional[str] = Field(
        None,
        description='Name of a secret that will be used to setup ingress TLS termination when TLS is enabled. When the field is empty string, the default cluster certificate will be used. See also the `tlsSupport` field.',
    )


class Metrics(BaseModel):
    enable: Optional[bool] = Field(
        None,
        description='Enables `metrics` the Che server endpoint. Default to `true`.',
    )


class CheServerIngress(BaseModel):
    labels: Optional[str] = Field(
        None,
        description='Comma separated list of labels that can be used to organize and categorize objects by scoping and selecting.',
    )


class CheServerRoute(BaseModel):
    labels: Optional[str] = Field(
        None,
        description='Comma separated list of labels that can be used to organize and categorize objects by scoping and selecting.',
    )


class DevfileRegistryIngress(BaseModel):
    labels: Optional[str] = Field(
        None,
        description='Comma separated list of labels that can be used to organize and categorize objects by scoping and selecting.',
    )


class DevfileRegistryRoute(BaseModel):
    labels: Optional[str] = Field(
        None,
        description='Comma separated list of labels that can be used to organize and categorize objects by scoping and selecting.',
    )


class PluginRegistryIngress(BaseModel):
    labels: Optional[str] = Field(
        None,
        description='Comma separated list of labels that can be used to organize and categorize objects by scoping and selecting.',
    )


class PluginRegistryRoute(BaseModel):
    labels: Optional[str] = Field(
        None,
        description='Comma separated list of labels that can be used to organize and categorize objects by scoping and selecting.',
    )


class Server(BaseModel):
    airGapContainerRegistryHostname: Optional[str] = Field(
        None,
        description='Optional host name, or URL, to an alternate container registry to pull images from. This value overrides the container registry host name defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in a restricted environment.',
    )
    airGapContainerRegistryOrganization: Optional[str] = Field(
        None,
        description='Optional repository name of an alternate container registry to pull images from. This value overrides the container registry organization defined in all the default container images involved in a Che deployment. This is particularly useful to install Eclipse Che in a restricted environment.',
    )
    allowUserDefinedWorkspaceNamespaces: Optional[bool] = Field(
        None,
        description="Defines that a user is allowed to specify a Kubernetes namespace, or an OpenShift project, which differs from the default. It's NOT RECOMMENDED to set to `true` without OpenShift OAuth configured. The OpenShift infrastructure also uses this property.",
    )
    cheClusterRoles: Optional[str] = Field(
        None,
        description='A comma-separated list of ClusterRoles that will be assigned to Che ServiceAccount. Be aware that the Che Operator has to already have all permissions in these ClusterRoles to grant them.',
    )
    cheDebug: Optional[str] = Field(
        None, description='Enables the debug mode for Che server. Defaults to `false`.'
    )
    cheFlavor: Optional[str] = Field(
        None,
        description='Specifies a variation of the installation. The options are `che` for upstream Che installations, or `codeready` for CodeReady Workspaces installation. If not necessary, do not override the default value.',
    )
    cheHost: Optional[str] = Field(
        None,
        description='Public host name of the installed Che server. When value is omitted, the value it will be automatically set by the Operator. See the `cheHostTLSSecret` field.',
    )
    cheHostTLSSecret: Optional[str] = Field(
        None,
        description='Name of a secret containing certificates to secure ingress or route for the custom host name of the installed Che server. See the `cheHost` field.',
    )
    cheImage: Optional[str] = Field(
        None,
        description='Overrides the container image used in Che deployment. This does NOT include the container image tag. Omit it or leave it empty to use the default container image provided by the Operator.',
    )
    cheImagePullPolicy: Optional[str] = Field(
        None,
        description='Overrides the image pull policy used in Che deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.',
    )
    cheImageTag: Optional[str] = Field(
        None,
        description='Overrides the tag of the container image used in Che deployment. Omit it or leave it empty to use the default image tag provided by the Operator.',
    )
    cheLogLevel: Optional[str] = Field(
        None,
        description='Log level for the Che server: `INFO` or `DEBUG`. Defaults to `INFO`.',
    )
    cheServerIngress: Optional[CheServerIngress] = Field(
        None, description='The Che server ingress custom settings.'
    )
    cheServerRoute: Optional[CheServerRoute] = Field(
        None, description='The Che server route custom settings.'
    )
    cheWorkspaceClusterRole: Optional[str] = Field(
        None,
        description='Custom cluster role bound to the user for the Che workspaces. The default roles are used if this is omitted or left blank.',
    )
    customCheProperties: Optional[Dict[str, str]] = Field(
        None,
        description='Map of additional environment variables that will be applied in the generated `che` configMap to be used by the Che server, in addition to the values already generated from other fields of the `CheCluster` custom resource (CR). When `customCheProperties` contains a property that would be normally generated in `che` configMap from other CR fields, the value defined in the `customCheProperties` is used instead.',
    )
    devfileRegistryCpuLimit: Optional[str] = Field(
        None,
        description='Overrides the CPU limit used in the devfile registry deployment. In cores. (500m = .5 cores). Default to 500m.',
    )
    devfileRegistryCpuRequest: Optional[str] = Field(
        None,
        description='Overrides the CPU request used in the devfile registry deployment. In cores. (500m = .5 cores). Default to 100m.',
    )
    devfileRegistryImage: Optional[str] = Field(
        None,
        description='Overrides the container image used in the devfile registry deployment. This includes the image tag. Omit it or leave it empty to use the default container image provided by the Operator.',
    )
    devfileRegistryIngress: Optional[DevfileRegistryIngress] = Field(
        None, description='The devfile registry ingress custom settings.'
    )
    devfileRegistryMemoryLimit: Optional[str] = Field(
        None,
        description='Overrides the memory limit used in the devfile registry deployment. Defaults to 256Mi.',
    )
    devfileRegistryMemoryRequest: Optional[str] = Field(
        None,
        description='Overrides the memory request used in the devfile registry deployment. Defaults to 16Mi.',
    )
    devfileRegistryPullPolicy: Optional[str] = Field(
        None,
        description='Overrides the image pull policy used in the devfile registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.',
    )
    devfileRegistryRoute: Optional[DevfileRegistryRoute] = Field(
        None, description='The devfile registry route custom settings.'
    )
    devfileRegistryUrl: Optional[str] = Field(
        None,
        description='Public URL of the devfile registry, that serves sample, ready-to-use devfiles. Set this ONLY when a use of an external devfile registry is needed. See the `externalDevfileRegistry` field. By default, this will be automatically calculated by the Operator.',
    )
    externalDevfileRegistry: Optional[bool] = Field(
        None,
        description='Instructs the Operator on whether to deploy a dedicated devfile registry server. By default, a dedicated devfile registry server is started. When `externalDevfileRegistry` is `true`, no such dedicated server will be started by the Operator and you will have to manually set the `devfileRegistryUrl` field',
    )
    externalPluginRegistry: Optional[bool] = Field(
        None,
        description='Instructs the Operator on whether to deploy a dedicated plugin registry server. By default, a dedicated plugin registry server is started. When `externalPluginRegistry` is `true`, no such dedicated server will be started by the Operator and you will have to manually set the `pluginRegistryUrl` field.',
    )
    gitSelfSignedCert: Optional[bool] = Field(
        None,
        description='When enabled, the certificate from `che-git-self-signed-cert` configMap will be propagated to the Che components and provide particular configuration for Git.',
    )
    nonProxyHosts: Optional[str] = Field(
        None,
        description='List of hosts that will be reached directly, bypassing the proxy. Specify wild card domain use the following form `.<DOMAIN>` and `|` as delimiter, for example: `localhost|.my.host.com|123.42.12.32` Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `nonProxyHosts` in a custom resource leads to merging non proxy hosts lists from the cluster proxy configuration and ones defined in the custom resources. See the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html). See also the `proxyURL` fields.',
    )
    pluginRegistryCpuLimit: Optional[str] = Field(
        None,
        description='Overrides the CPU limit used in the plugin registry deployment. In cores. (500m = .5 cores). Default to 500m.',
    )
    pluginRegistryCpuRequest: Optional[str] = Field(
        None,
        description='Overrides the CPU request used in the plugin registry deployment. In cores. (500m = .5 cores). Default to 100m.',
    )
    pluginRegistryImage: Optional[str] = Field(
        None,
        description='Overrides the container image used in the plugin registry deployment. This includes the image tag. Omit it or leave it empty to use the default container image provided by the Operator.',
    )
    pluginRegistryIngress: Optional[PluginRegistryIngress] = Field(
        None, description='Plugin registry ingress custom settings.'
    )
    pluginRegistryMemoryLimit: Optional[str] = Field(
        None,
        description='Overrides the memory limit used in the plugin registry deployment. Defaults to 256Mi.',
    )
    pluginRegistryMemoryRequest: Optional[str] = Field(
        None,
        description='Overrides the memory request used in the plugin registry deployment. Defaults to 16Mi.',
    )
    pluginRegistryPullPolicy: Optional[str] = Field(
        None,
        description='Overrides the image pull policy used in the plugin registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.',
    )
    pluginRegistryRoute: Optional[PluginRegistryRoute] = Field(
        None, description='Plugin registry route custom settings.'
    )
    pluginRegistryUrl: Optional[str] = Field(
        None,
        description='Public URL of the plugin registry that serves sample ready-to-use devfiles. Set this ONLY if a use of an external devfile registry is needed. See the `externalPluginRegistry` field. By default, this will be automatically calculated by the Operator.',
    )
    proxyPassword: Optional[str] = Field(
        None,
        description='Password of the proxy server. Only use when proxy configuration is required. See the `proxyURL`, `proxyUser` and `proxySecret` fields.',
    )
    proxyPort: Optional[str] = Field(
        None,
        description='Port of the proxy server. Only use when configuring a proxy is required. See also the `proxyURL` and `nonProxyHosts` fields.',
    )
    proxySecret: Optional[str] = Field(
        None,
        description='The secret that contains `user` and `password` for a proxy server. When the secret is defined, the `proxyUser` and `proxyPassword` are ignored.',
    )
    proxyURL: Optional[str] = Field(
        None,
        description='URL (protocol+host name) of the proxy server. This drives the appropriate changes in the `JAVA_OPTS` and `https(s)_proxy` variables in the Che server and workspaces containers. Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `proxyUrl` in a custom resource leads to overrides the cluster proxy configuration with fields `proxyUrl`, `proxyPort`, `proxyUser` and `proxyPassword` from the custom resource. See the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html). See also the `proxyPort` and `nonProxyHosts` fields.',
    )
    proxyUser: Optional[str] = Field(
        None,
        description='User name of the proxy server. Only use when configuring a proxy is required. See also the `proxyURL`, `proxyPassword` and `proxySecret` fields.',
    )
    selfSignedCert: Optional[bool] = Field(
        None,
        description='Deprecated. The value of this flag is ignored. The Che Operator will automatically detect if the router certificate is self-signed and propagate it to other components, such as the Che server.',
    )
    serverCpuLimit: Optional[str] = Field(
        None,
        description='Overrides the CPU limit used in the Che server deployment In cores. (500m = .5 cores). Default to 1.',
    )
    serverCpuRequest: Optional[str] = Field(
        None,
        description='Overrides the CPU request used in the Che server deployment In cores. (500m = .5 cores). Default to 100m.',
    )
    serverExposureStrategy: Optional[str] = Field(
        None,
        description='Sets the server and workspaces exposure type. Possible values are `multi-host`, `single-host`, `default-host`. Defaults to `multi-host`, which creates a separate ingress, or OpenShift routes, for every required endpoint. `single-host` makes Che exposed on a single host name with workspaces exposed on subpaths. Read the docs to learn about the limitations of this approach. Also consult the `singleHostExposureType` property to further configure how the Operator and the Che server make that happen on Kubernetes. `default-host` exposes the Che server on the host of the cluster. Read the docs to learn about the limitations of this approach.',
    )
    serverMemoryLimit: Optional[str] = Field(
        None,
        description='Overrides the memory limit used in the Che server deployment. Defaults to 1Gi.',
    )
    serverMemoryRequest: Optional[str] = Field(
        None,
        description='Overrides the memory request used in the Che server deployment. Defaults to 512Mi.',
    )
    serverTrustStoreConfigMapName: Optional[str] = Field(
        None,
        description='Name of the configMap with public certificates to add to Java trust store of the Che server. This is often required when adding the OpenShift OAuth provider, which has HTTPS endpoint signed with self-signed cert. The Che server must be aware of its CA cert to be able to request it. This is disabled by default.',
    )
    singleHostGatewayConfigMapLabels: Optional[Dict[str, str]] = Field(
        None,
        description='The labels that need to be present in the configMaps representing the gateway configuration.',
    )
    singleHostGatewayConfigSidecarImage: Optional[str] = Field(
        None,
        description='The image used for the gateway sidecar that provides configuration to the gateway. Omit it or leave it empty to use the default container image provided by the Operator.',
    )
    singleHostGatewayImage: Optional[str] = Field(
        None,
        description='The image used for the gateway in the single host mode. Omit it or leave it empty to use the default container image provided by the Operator.',
    )
    tlsSupport: Optional[bool] = Field(
        None,
        description='Deprecated. Instructs the Operator to deploy Che in TLS mode. This is enabled by default. Disabling TLS sometimes cause malfunction of some Che components.',
    )
    useInternalClusterSVCNames: Optional[bool] = Field(
        None,
        description='Use internal cluster SVC names to communicate between components to speed up the traffic and avoid proxy issues. The default value is `false`.',
    )
    workspaceNamespaceDefault: Optional[str] = Field(
        None,
        description="Defines Kubernetes default namespace in which user's workspaces are created if user does not override it. It's possible to use `<username>`,`<userid>` and `<workspaceid>` placeholders, such as che-workspace-<username>. In that case, a new namespace will be created for each user or workspace. Is used by OpenShift infrastructure as well to specify Project.",
    )


class Storage(BaseModel):
    postgresPVCStorageClassName: Optional[str] = Field(
        None,
        description='Storage class for the Persistent Volume Claim dedicated to the PosgreSQL database. When omitted or left blank, a default storage class is used.',
    )
    preCreateSubPaths: Optional[bool] = Field(
        None,
        description='Instructs the Che server to start a special Pod to pre-create a sub-path in the Persistent Volumes. Defaults to `false`, however it will need to enable it according to the configuration of your K8S cluster.',
    )
    pvcClaimSize: Optional[str] = Field(
        None,
        description='Size of the persistent volume claim for workspaces. Defaults to `1Gi`.',
    )
    pvcJobsImage: Optional[str] = Field(
        None,
        description='Overrides the container image used to create sub-paths in the Persistent Volumes. This includes the image tag. Omit it or leave it empty to use the default container image provided by the Operator. See also the `preCreateSubPaths` field.',
    )
    pvcStrategy: Optional[str] = Field(
        None,
        description='Persistent volume claim strategy for the Che server. This Can be:`common` (all workspaces PVCs in one volume), `per-workspace` (one PVC per workspace for all declared volumes) and `unique` (one PVC per declared volume). Defaults to `common`.',
    )
    workspacePVCStorageClassName: Optional[str] = Field(
        None,
        description='Storage class for the Persistent Volume Claims dedicated to the Che workspaces. When omitted or left blank, a default storage class is used.',
    )


class SpecModel(BaseModel):
    auth: Optional[Auth] = Field(
        None,
        description='Configuration settings related to the Authentication used by the Che installation.',
    )
    database: Optional[Database] = Field(
        None,
        description='Configuration settings related to the database used by the Che installation.',
    )
    imagePuller: Optional[ImagePuller] = Field(
        None, description='Kubernetes Image Puller configuration'
    )
    k8s: Optional[K8s] = Field(
        None,
        description='Configuration settings specific to Che installations made on upstream Kubernetes.',
    )
    metrics: Optional[Metrics] = Field(
        None,
        description='Configuration settings related to the metrics collection used by the Che installation.',
    )
    server: Optional[Server] = Field(
        None,
        description='General configuration settings related to the Che server and the plugin and devfile registries',
    )
    storage: Optional[Storage] = Field(
        None,
        description='Configuration settings related to the persistent storage used by the Che installation.',
    )


class Status(BaseModel):
    cheClusterRunning: Optional[str] = Field(
        None,
        description='Status of a Che installation. Can be `Available`, `Unavailable`, or `Available, Rolling Update in Progress`.',
    )
    cheURL: Optional[str] = Field(None, description='Public URL to the Che server.')
    cheVersion: Optional[str] = Field(
        None, description='Current installed Che version.'
    )
    dbProvisioned: Optional[bool] = Field(
        None,
        description='Indicates that a PosgreSQL instance has been correctly provisioned or not.',
    )
    devfileRegistryURL: Optional[str] = Field(
        None, description='Public URL to the devfile registry.'
    )
    gitHubOAuthProvisioned: Optional[bool] = Field(
        None,
        description='Indicates whether an Identity Provider instance, Keycloak or RH-SSO, has been configured to integrate with the GitHub OAuth.',
    )
    helpLink: Optional[str] = Field(
        None,
        description='A URL that points to some URL where to find help related to the current Operator status.',
    )
    keycloakProvisioned: Optional[bool] = Field(
        None,
        description='Indicates whether an Identity Provider instance, Keycloak or RH-SSO, has been provisioned with realm, client and user.',
    )
    keycloakURL: Optional[str] = Field(
        None,
        description='Public URL to the Identity Provider server, Keycloak or RH-SSO,.',
    )
    message: Optional[str] = Field(
        None,
        description='A human readable message indicating details about why the Pod is in this condition.',
    )
    openShiftoAuthProvisioned: Optional[bool] = Field(
        None,
        description='Indicates whether an Identity Provider instance, Keycloak or RH-SSO, has been configured to integrate with the OpenShift OAuth.',
    )
    pluginRegistryURL: Optional[str] = Field(
        None, description='Public URL to the plugin registry.'
    )
    reason: Optional[str] = Field(
        None,
        description='A brief CamelCase message indicating details about why the Pod is in this state.',
    )


class CheCluster(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel] = Field(
        None,
        description='Desired configuration of the Che installation. Based on these settings, the  Operator automatically creates and maintains several ConfigMaps that will contain the appropriate environment variables the various components of the Che installation. These generated ConfigMaps must NOT be updated manually.',
    )
    status: Optional[Status] = Field(
        None,
        description='CheClusterStatus defines the observed state of Che installation',
    )


class CheClusterList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[CheCluster] = Field(
        ...,
        description='List of checlusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
