# generated by datamodel-codegen:
#   filename:  openapi-v2.json
#   timestamp: 2021-04-29T07:54:09+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Field

from ....io.k8s.apimachinery.pkg.apis.meta import v1


class SourceMatchItem(BaseModel):
    name: str = Field(..., description='Label to match.')
    regex: Optional[bool] = Field(
        None,
        description='Whether to match on equality (false) or regular-expression (true).',
    )
    value: str = Field(..., description='Label value to match.')


class TargetMatchItem(BaseModel):
    name: str = Field(..., description='Label to match.')
    regex: Optional[bool] = Field(
        None,
        description='Whether to match on equality (false) or regular-expression (true).',
    )
    value: str = Field(..., description='Label value to match.')


class InhibitRule(BaseModel):
    equal: Optional[List[str]] = Field(
        None,
        description='Labels that must have an equal value in the source and target alert for the inhibition to take effect.',
    )
    sourceMatch: Optional[List[SourceMatchItem]] = Field(
        None,
        description='Matchers for which one or more alerts have to exist for the inhibition to take effect. The operator enforces that the alert matches the resource’s namespace.',
    )
    targetMatch: Optional[List[TargetMatchItem]] = Field(
        None,
        description='Matchers that have to be fulfilled in the alerts to be muted. The operator enforces that the alert matches the resource’s namespace.',
    )


class AuthPassword(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthSecret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Header(BaseModel):
    key: str = Field(..., description='Key of the tuple.')
    value: str = Field(..., description='Value of the tuple.')


class ConfigMap(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class Secret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Ca(BaseModel):
    configMap: Optional[ConfigMap] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[Secret] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Cert(BaseModel):
    configMap: Optional[ConfigMapModel] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfig(BaseModel):
    ca: Optional[Ca] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[Cert] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecret] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class EmailConfig(BaseModel):
    authIdentity: Optional[str] = None
    authPassword: Optional[AuthPassword] = Field(
        None, description='SecretKeySelector selects a key of a Secret.'
    )
    authSecret: Optional[AuthSecret] = Field(
        None, description='SecretKeySelector selects a key of a Secret.'
    )
    authUsername: Optional[str] = Field(
        None, description='SMTP authentication information.'
    )
    from_: Optional[str] = Field(None, alias='from', description='The sender address.')
    headers: Optional[List[Header]] = Field(
        None,
        description='Further headers email header key/value pairs. Overrides any headers previously set by the notification implementation.',
    )
    hello: Optional[str] = Field(
        None, description='The hostname to identify to the SMTP server.'
    )
    html: Optional[str] = Field(
        None, description='The HTML body of the email notification.'
    )
    requireTLS: Optional[bool] = Field(
        None,
        description='The SMTP TLS requirement. Note that Go does not support unencrypted connections to remote SMTP endpoints.',
    )
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    smarthost: Optional[str] = Field(
        None, description='The SMTP host through which emails are sent.'
    )
    text: Optional[str] = Field(
        None, description='The text body of the email notification.'
    )
    tlsConfig: Optional[TlsConfig] = Field(None, description='TLS configuration')
    to: Optional[str] = Field(
        None, description='The email address to send notifications to.'
    )


class ApiKey(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Detail(BaseModel):
    key: str = Field(..., description='Key of the tuple.')
    value: str = Field(..., description='Value of the tuple.')


class Password(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Username(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuth(BaseModel):
    password: Optional[Password] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[Username] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel1(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel(BaseModel):
    configMap: Optional[ConfigMapModel1] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel1] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel2(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel(BaseModel):
    configMap: Optional[ConfigMapModel2] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel2] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel(BaseModel):
    ca: Optional[CaModel] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfig(BaseModel):
    basicAuth: Optional[BasicAuth] = Field(
        None, description='BasicAuth for the client.'
    )
    bearerTokenSecret: Optional[BearerTokenSecret] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel] = Field(
        None, description='TLS configuration for the client.'
    )


class Responder(BaseModel):
    id: Optional[str] = Field(None, description='ID of the responder.')
    name: Optional[str] = Field(None, description='Name of the responder.')
    type: Optional[str] = Field(None, description='Type of responder.')
    username: Optional[str] = Field(None, description='Username of the responder.')


class OpsgenieConfig(BaseModel):
    apiKey: Optional[ApiKey] = Field(
        None,
        description="The secret's key that contains the OpsGenie API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    apiURL: Optional[str] = Field(
        None, description='The URL to send OpsGenie API requests to.'
    )
    description: Optional[str] = Field(None, description='Description of the incident.')
    details: Optional[List[Detail]] = Field(
        None,
        description='A set of arbitrary key/value pairs that provide further detail about the incident.',
    )
    httpConfig: Optional[HttpConfig] = Field(
        None, description='HTTP client configuration.'
    )
    message: Optional[str] = Field(
        None, description='Alert text limited to 130 characters.'
    )
    note: Optional[str] = Field(None, description='Additional alert note.')
    priority: Optional[str] = Field(
        None,
        description='Priority level of alert. Possible values are P1, P2, P3, P4, and P5.',
    )
    responders: Optional[List[Responder]] = Field(
        None, description='List of responders responsible for notifications.'
    )
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    source: Optional[str] = Field(
        None, description='Backlink to the sender of the notification.'
    )
    tags: Optional[str] = Field(
        None, description='Comma separated list of tags attached to the notifications.'
    )


class DetailModel(BaseModel):
    key: str = Field(..., description='Key of the tuple.')
    value: str = Field(..., description='Value of the tuple.')


class PasswordModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel(BaseModel):
    password: Optional[PasswordModel] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel3(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel1(BaseModel):
    configMap: Optional[ConfigMapModel3] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel3] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel4(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel1(BaseModel):
    configMap: Optional[ConfigMapModel4] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel4] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel1(BaseModel):
    ca: Optional[CaModel1] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel1] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel1] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfigModel(BaseModel):
    basicAuth: Optional[BasicAuthModel] = Field(
        None, description='BasicAuth for the client.'
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel1] = Field(
        None, description='TLS configuration for the client.'
    )


class RoutingKey(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ServiceKey(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class PagerdutyConfig(BaseModel):
    class_: Optional[str] = Field(
        None, alias='class', description='The class/type of the event.'
    )
    client: Optional[str] = Field(None, description='Client identification.')
    clientURL: Optional[str] = Field(
        None, description='Backlink to the sender of notification.'
    )
    component: Optional[str] = Field(
        None, description='The part or component of the affected system that is broken.'
    )
    description: Optional[str] = Field(None, description='Description of the incident.')
    details: Optional[List[DetailModel]] = Field(
        None,
        description='Arbitrary key/value pairs that provide further detail about the incident.',
    )
    group: Optional[str] = Field(None, description='A cluster or grouping of sources.')
    httpConfig: Optional[HttpConfigModel] = Field(
        None, description='HTTP client configuration.'
    )
    routingKey: Optional[RoutingKey] = Field(
        None,
        description="The secret's key that contains the PagerDuty integration key (when using Events API v2). Either this field or `serviceKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    serviceKey: Optional[ServiceKey] = Field(
        None,
        description='The secret\'s key that contains the PagerDuty service key (when using integration type "Prometheus"). Either this field or `routingKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.',
    )
    severity: Optional[str] = Field(None, description='Severity of the incident.')
    url: Optional[str] = Field(None, description='The URL to send requests to.')


class PasswordModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel1(BaseModel):
    password: Optional[PasswordModel1] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel1] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel5(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel2(BaseModel):
    configMap: Optional[ConfigMapModel5] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel5] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel6(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel6(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel2(BaseModel):
    configMap: Optional[ConfigMapModel6] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel6] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel2(BaseModel):
    ca: Optional[CaModel2] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel2] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel2] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfigModel1(BaseModel):
    basicAuth: Optional[BasicAuthModel1] = Field(
        None, description='BasicAuth for the client.'
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel1] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel2] = Field(
        None, description='TLS configuration for the client.'
    )


class Token(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UserKey(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class PushoverConfig(BaseModel):
    expire: Optional[str] = Field(
        None,
        description='How long your notification will continue to be retried for, unless the user acknowledges the notification.',
    )
    html: Optional[bool] = Field(
        None, description='Whether notification message is HTML or plain text.'
    )
    httpConfig: Optional[HttpConfigModel1] = Field(
        None, description='HTTP client configuration.'
    )
    message: Optional[str] = Field(None, description='Notification message.')
    priority: Optional[str] = Field(
        None, description='Priority, see https://pushover.net/api#priority'
    )
    retry: Optional[str] = Field(
        None,
        description='How often the Pushover servers will send the same notification to the user. Must be at least 30 seconds.',
    )
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    sound: Optional[str] = Field(
        None,
        description="The name of one of the sounds supported by device clients to override the user's default sound choice",
    )
    title: Optional[str] = Field(None, description='Notification title.')
    token: Optional[Token] = Field(
        None,
        description='Your registered application’s API token, see https://pushover.net/apps',
    )
    url: Optional[str] = Field(
        None, description='A supplementary URL shown alongside the message.'
    )
    urlTitle: Optional[str] = Field(
        None,
        description='A title for supplementary URL, otherwise just the URL is shown',
    )
    userKey: Optional[UserKey] = Field(
        None, description='The recipient user’s user key.'
    )


class Confirm(BaseModel):
    dismissText: Optional[str] = None
    okText: Optional[str] = None
    text: str
    title: Optional[str] = None


class Action(BaseModel):
    confirm: Optional[Confirm] = Field(
        None,
        description='SlackConfirmationField protect users from destructive actions or particularly distinguished decisions by asking them to confirm their button click one more time. See https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.',
    )
    name: Optional[str] = None
    style: Optional[str] = None
    text: str
    type: str
    url: Optional[str] = None
    value: Optional[str] = None


class ApiURL(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class FieldModel(BaseModel):
    short: Optional[bool] = None
    title: str
    value: str


class PasswordModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel2(BaseModel):
    password: Optional[PasswordModel2] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel2] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel7(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel7(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel3(BaseModel):
    configMap: Optional[ConfigMapModel7] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel7] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel8(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel8(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel3(BaseModel):
    configMap: Optional[ConfigMapModel8] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel8] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel3(BaseModel):
    ca: Optional[CaModel3] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel3] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel3] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfigModel2(BaseModel):
    basicAuth: Optional[BasicAuthModel2] = Field(
        None, description='BasicAuth for the client.'
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel2] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel3] = Field(
        None, description='TLS configuration for the client.'
    )


class SlackConfig(BaseModel):
    actions: Optional[List[Action]] = Field(
        None,
        description='A list of Slack actions that are sent with each notification.',
    )
    apiURL: Optional[ApiURL] = Field(
        None,
        description="The secret's key that contains the Slack webhook URL. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    callbackId: Optional[str] = None
    channel: Optional[str] = Field(
        None, description='The channel or user to send notifications to.'
    )
    color: Optional[str] = None
    fallback: Optional[str] = None
    fields: Optional[List[FieldModel]] = Field(
        None, description='A list of Slack fields that are sent with each notification.'
    )
    footer: Optional[str] = None
    httpConfig: Optional[HttpConfigModel2] = Field(
        None, description='HTTP client configuration.'
    )
    iconEmoji: Optional[str] = None
    iconURL: Optional[str] = None
    imageURL: Optional[str] = None
    linkNames: Optional[bool] = None
    mrkdwnIn: Optional[List[str]] = None
    pretext: Optional[str] = None
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    shortFields: Optional[bool] = None
    text: Optional[str] = None
    thumbURL: Optional[str] = None
    title: Optional[str] = None
    titleLink: Optional[str] = None
    username: Optional[str] = None


class ApiKeyModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CustomField(BaseModel):
    key: str = Field(..., description='Key of the tuple.')
    value: str = Field(..., description='Value of the tuple.')


class PasswordModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel3(BaseModel):
    password: Optional[PasswordModel3] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel3] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel9(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel9(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel4(BaseModel):
    configMap: Optional[ConfigMapModel9] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel9] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel10(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel10(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel4(BaseModel):
    configMap: Optional[ConfigMapModel10] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel10] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel4(BaseModel):
    ca: Optional[CaModel4] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel4] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel4] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfigModel3(BaseModel):
    basicAuth: Optional[BasicAuthModel3] = Field(
        None, description='BasicAuth for the client.'
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel3] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel4] = Field(
        None, description='TLS configuration for the client.'
    )


class VictoropsConfig(BaseModel):
    apiKey: Optional[ApiKeyModel] = Field(
        None, description='The API key to use when talking to the VictorOps API.'
    )
    apiUrl: Optional[str] = Field(None, description='The VictorOps API URL.')
    customFields: Optional[List[CustomField]] = Field(
        None, description='Additional custom fields for notification.'
    )
    entityDisplayName: Optional[str] = Field(
        None, description='Contains summary of the alerted problem.'
    )
    httpConfig: Optional[HttpConfigModel3] = Field(
        None, description="The HTTP client's configuration."
    )
    messageType: Optional[str] = Field(
        None,
        description='Describes the behavior of the alert (CRITICAL, WARNING, INFO).',
    )
    monitoringTool: Optional[str] = Field(
        None, description='The monitoring tool the state message is from.'
    )
    routingKey: str = Field(..., description='A key used to map the alert to a team.')
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    stateMessage: Optional[str] = Field(
        None, description='Contains long explanation of the alerted problem.'
    )


class PasswordModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel4(BaseModel):
    password: Optional[PasswordModel4] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel4] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel11(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel11(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel5(BaseModel):
    configMap: Optional[ConfigMapModel11] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel11] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel12(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel12(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel5(BaseModel):
    configMap: Optional[ConfigMapModel12] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel12] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel5(BaseModel):
    ca: Optional[CaModel5] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel5] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel5] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfigModel4(BaseModel):
    basicAuth: Optional[BasicAuthModel4] = Field(
        None, description='BasicAuth for the client.'
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel4] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel5] = Field(
        None, description='TLS configuration for the client.'
    )


class UrlSecret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class WebhookConfig(BaseModel):
    httpConfig: Optional[HttpConfigModel4] = Field(
        None, description='HTTP client configuration.'
    )
    maxAlerts: Optional[int] = Field(
        None, description='Maximum number of alerts to be sent per webhook message.'
    )
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    url: Optional[str] = Field(
        None,
        description='The URL to send HTTP POST requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined.',
    )
    urlSecret: Optional[UrlSecret] = Field(
        None,
        description="The secret's key that contains the webhook URL to send HTTP requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )


class ApiSecret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class PasswordModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel5(BaseModel):
    password: Optional[PasswordModel5] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel5] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel13(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel13(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel6(BaseModel):
    configMap: Optional[ConfigMapModel13] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel13] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel14(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel14(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel6(BaseModel):
    configMap: Optional[ConfigMapModel14] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel14] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel6(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel6(BaseModel):
    ca: Optional[CaModel6] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel6] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel6] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfigModel5(BaseModel):
    basicAuth: Optional[BasicAuthModel5] = Field(
        None, description='BasicAuth for the client.'
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel5] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel6] = Field(
        None, description='TLS configuration for the client.'
    )


class WechatConfig(BaseModel):
    agentID: Optional[str] = None
    apiSecret: Optional[ApiSecret] = Field(
        None,
        description="The secret's key that contains the WeChat API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    apiURL: Optional[str] = Field(None, description='The WeChat API URL.')
    corpID: Optional[str] = Field(None, description='The corp id for authentication.')
    httpConfig: Optional[HttpConfigModel5] = Field(
        None, description='HTTP client configuration.'
    )
    message: Optional[str] = Field(
        None, description='API request data as defined by the WeChat API.'
    )
    messageType: Optional[str] = None
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    toParty: Optional[str] = None
    toTag: Optional[str] = None
    toUser: Optional[str] = None


class Receiver(BaseModel):
    emailConfigs: Optional[List[EmailConfig]] = Field(
        None, description='List of Email configurations.'
    )
    name: str = Field(
        ...,
        description='Name of the receiver. Must be unique across all items from the list.',
    )
    opsgenieConfigs: Optional[List[OpsgenieConfig]] = Field(
        None, description='List of OpsGenie configurations.'
    )
    pagerdutyConfigs: Optional[List[PagerdutyConfig]] = Field(
        None, description='List of PagerDuty configurations.'
    )
    pushoverConfigs: Optional[List[PushoverConfig]] = Field(
        None, description='List of Pushover configurations.'
    )
    slackConfigs: Optional[List[SlackConfig]] = Field(
        None, description='List of Slack configurations.'
    )
    victoropsConfigs: Optional[List[VictoropsConfig]] = Field(
        None, description='List of VictorOps configurations.'
    )
    webhookConfigs: Optional[List[WebhookConfig]] = Field(
        None, description='List of webhook configurations.'
    )
    wechatConfigs: Optional[List[WechatConfig]] = Field(
        None, description='List of WeChat configurations.'
    )


class Matcher(BaseModel):
    name: str = Field(..., description='Label to match.')
    regex: Optional[bool] = Field(
        None,
        description='Whether to match on equality (false) or regular-expression (true).',
    )
    value: str = Field(..., description='Label value to match.')


class Route(BaseModel):
    continue_: Optional[bool] = Field(
        None,
        alias='continue',
        description='Boolean indicating whether an alert should continue matching subsequent sibling nodes. It will always be overridden to true for the first-level route by the Prometheus operator.',
    )
    groupBy: Optional[List[str]] = Field(
        None, description='List of labels to group by.'
    )
    groupInterval: Optional[str] = Field(
        None,
        description='How long to wait before sending an updated notification. Must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).',
    )
    groupWait: Optional[str] = Field(
        None,
        description='How long to wait before sending the initial notification. Must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).',
    )
    matchers: Optional[List[Matcher]] = Field(
        None,
        description='List of matchers that the alert’s labels should match. For the first level route, the operator removes any existing equality and regexp matcher on the `namespace` label and adds a `namespace: <object namespace>` matcher.',
    )
    receiver: Optional[str] = Field(
        None,
        description='Name of the receiver for this route. If present, it should be listed in the `receivers` field. The field can be omitted only for nested routes otherwise it is mandatory.',
    )
    repeatInterval: Optional[str] = Field(
        None,
        description='How long to wait before repeating the last notification. Must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).',
    )
    routes: Optional[List[Any]] = Field(None, description='Child routes.')


class Spec(BaseModel):
    inhibitRules: Optional[List[InhibitRule]] = Field(
        None,
        description='List of inhibition rules. The rules will only apply to alerts matching the resource’s namespace.',
    )
    receivers: Optional[List[Receiver]] = Field(None, description='List of receivers.')
    route: Optional[Route] = Field(
        None,
        description='The Alertmanager route definition for alerts matching the resource’s namespace. It will be added to the generated Alertmanager configuration as a first-level route.',
    )


class AlertmanagerConfig(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Spec = Field(
        ...,
        description='AlertmanagerConfigSpec is a specification of the desired behavior of the Alertmanager configuration. By definition, the Alertmanager configuration only applies to alerts for which the `namespace` label is equal to the namespace of the AlertmanagerConfig resource.',
    )


class AlertmanagerConfigList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[AlertmanagerConfig] = Field(
        ...,
        description='List of alertmanagerconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
