# generated by datamodel-codegen:
#   filename:  openapi-v2.json
#   timestamp: 2021-04-29T07:54:09+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field, conint, constr

from .....io.k8s.apimachinery.pkg.apis.meta import v1


class BindingPath(BaseModel):
    containersPath: Optional[str] = Field(
        None,
        description='ContainersPath defines the path to the corev1.Containers reference If BindingPath is not specified, the default location is going to be: "spec.template.spec.containers"',
    )
    secretPath: Optional[str] = Field(
        None,
        description='SecretPath defines the path to a string field where the name of the secret object is going to be assigned. Note: The name of the secret object is same as that of the name of SBR CR (metadata.name)',
    )


class MatchExpression(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpression]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class Application(BaseModel):
    bindingPath: Optional[BindingPath] = Field(
        None,
        description='BindingPath refers to the paths in the application workload\'s schema where the binding workload would be referenced. If BindingPath is not specified the default path locations is going to be used.  The default location for ContainersPath is going to be: "spec.template.spec.containers" and if SecretPath is not specified, the name of the secret object is not going to be specified.',
    )
    group: str = Field(..., description='Group of the referent.')
    kind: Optional[str] = Field(None, description='Kind of the referent.')
    labelSelector: Optional[LabelSelector] = Field(
        None,
        description='A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
    )
    name: Optional[str] = Field(None, description='Name of the referent.')
    resource: Optional[str] = Field(None, description='Resource of the referent.')
    version: str = Field(..., description='Version of the referent.')


class Mapping(BaseModel):
    name: str = Field(..., description='Name is the name of new binding')
    value: str = Field(
        ...,
        description='Value is a template which will be rendered and ibjected into the application',
    )


class Service(BaseModel):
    group: str = Field(..., description='Group of the referent.')
    id: Optional[str] = None
    kind: Optional[str] = Field(None, description='Kind of the referent.')
    name: Optional[str] = Field(None, description='Name of the referent.')
    namespace: Optional[str] = Field(
        None,
        description='Namespace of the referent. if empty assumes the same namespace as ServiceBinding',
    )
    resource: Optional[str] = Field(None, description='Resource of the referent.')
    version: str = Field(..., description='Version of the referent.')


class Spec(BaseModel):
    application: Optional[Application] = Field(
        None,
        description='Application is used to identify the application connecting to the backing service operator.',
    )
    bindAsFiles: Optional[bool] = Field(
        None,
        description="BindAsFiles makes available the binding values as files in the application's container See MountPath attribute description for more details.",
    )
    detectBindingResources: Optional[bool] = Field(
        None,
        description='DetectBindingResources is flag used to bind all non-bindable variables from different subresources owned by backing operator CR.',
    )
    mappings: Optional[List[Mapping]] = Field(None, description='Custom mappings')
    mountPath: Optional[str] = Field(
        None,
        description='MountPath is the path inside app container where bindings will be mounted If `SERVICE_BINDING_ROOT` env var is present, mountPath is ignored. If `SERVICE_BINDING_ROOT` is absent and mountPath is present, set `SERVICE_BINDING_ROOT` as mountPath value If `SERVICE_BINDING_ROOT` is absent but mounthPath is absent, set   SERVICE_BINDING_ROOT as `/bindings` When mountPath is used, the file will be mounted directly under that directory Otherwise it will be under `SERVICE_BINDING_ROOT`/<SERVICE-BINDING-NAME>',
    )
    namingStrategy: Optional[str] = Field(
        None,
        description="NamingStrategy defines custom string template for preparing binding names. It can be pre-defined strategies(i.e none,uppercase), in case strategy provided in this field isn't defined we are going to treat the value as a custom template and prepare binding names accordingly.",
    )
    services: List[Service] = Field(
        ...,
        description='Services is used to identify multiple backing services.',
        min_items=1,
    )


class ApplicationModel(BaseModel):
    group: str = Field(..., description='Group of the referent.')
    kind: Optional[str] = Field(None, description='Kind of the referent.')
    name: Optional[str] = Field(None, description='Name of the referent.')
    resource: Optional[str] = Field(None, description='Resource of the referent.')
    version: str = Field(..., description='Version of the referent.')


class Status(Enum):
    True_ = 'True'
    False_ = 'False'
    Unknown = 'Unknown'


class Condition(BaseModel):
    lastTransitionTime: datetime = Field(
        ...,
        description='lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.',
    )
    message: constr(max_length=32768) = Field(
        ...,
        description='message is a human readable message indicating details about the transition. This may be an empty string.',
    )
    observedGeneration: Optional[conint(ge=0)] = Field(
        None,
        description='observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.',
    )
    reason: constr(
        regex=r'^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$', min_length=1, max_length=1024
    ) = Field(
        ...,
        description="reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
    )
    status: Status = Field(
        ..., description='status of the condition, one of True, False, Unknown.'
    )
    type: constr(
        regex=r'^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
        max_length=316,
    ) = Field(
        ...,
        description='type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)',
    )


class StatusModel(BaseModel):
    applications: Optional[List[ApplicationModel]] = Field(
        None,
        description='Application defines the application workloads to which the binding secret has injected',
    )
    conditions: Optional[List[Condition]] = Field(
        None,
        description="Conditions describes the state of the operator's reconciliation functionality.",
    )
    secret: str = Field(
        ..., description='Secret is the name of the intermediate secret'
    )


class ServiceBinding(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Spec = Field(
        ...,
        description='ServiceBindingSpec defines the desired state of ServiceBinding',
    )
    status: Optional[StatusModel] = Field(
        None,
        description='ServiceBindingStatus defines the observed state of ServiceBinding',
    )


class ServiceBindingList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ServiceBinding] = Field(
        ...,
        description='List of servicebindings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
