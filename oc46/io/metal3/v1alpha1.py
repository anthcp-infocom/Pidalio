# generated by datamodel-codegen:
#   filename:  openapi-v2.json
#   timestamp: 2021-04-29T07:54:09+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, conint, constr

from ..k8s.apimachinery.pkg.apis.meta import v1


class Bmc(BaseModel):
    address: str = Field(
        ...,
        description='Address holds the URL for accessing the controller on the network.',
    )
    credentialsName: str = Field(
        ...,
        description='The name of the secret containing the BMC credentials (requires keys "username" and "password").',
    )
    disableCertificateVerification: Optional[bool] = Field(
        None,
        description='DisableCertificateVerification disables verification of server certificates when using HTTPS to connect to the BMC. This is required when the server certificate is self-signed, but is insecure because it allows a man-in-the-middle to intercept the connection.',
    )


class BootMode(Enum):
    UEFI = 'UEFI'
    legacy = 'legacy'


class ConsumerRef(BaseModel):
    apiVersion: Optional[str] = Field(None, description='API version of the referent.')
    fieldPath: Optional[str] = Field(
        None,
        description='If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )
    resourceVersion: Optional[str] = Field(
        None,
        description='Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
    )
    uid: Optional[str] = Field(
        None,
        description='UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
    )


class ChecksumType(Enum):
    md5 = 'md5'
    sha256 = 'sha256'
    sha512 = 'sha512'


class Format(Enum):
    raw = 'raw'
    qcow2 = 'qcow2'
    vdi = 'vdi'
    vmdk = 'vmdk'


class Image(BaseModel):
    checksum: str = Field(..., description='Checksum is the checksum for the image.')
    checksumType: Optional[ChecksumType] = Field(
        None,
        description='ChecksumType is the checksum algorithm for the image. e.g md5, sha256, sha512',
    )
    format: Optional[Format] = Field(
        None,
        description='DiskFormat contains the format of the image (raw, qcow2, ...) Needs to be set to raw for raw images streaming',
    )
    url: str = Field(..., description='URL is a location of an image to deploy.')


class MetaData(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name is unique within a namespace to reference a secret resource.',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace defines the space within which the secret name must be unique.',
    )


class NetworkData(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name is unique within a namespace to reference a secret resource.',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace defines the space within which the secret name must be unique.',
    )


class RootDeviceHints(BaseModel):
    deviceName: Optional[str] = Field(
        None,
        description='A Linux device name like "/dev/vda". The hint must match the actual value exactly.',
    )
    hctl: Optional[str] = Field(
        None,
        description='A SCSI bus address like 0:0:0:0. The hint must match the actual value exactly.',
    )
    minSizeGigabytes: Optional[conint(ge=0)] = Field(
        None, description='The minimum size of the device in Gigabytes.'
    )
    model: Optional[str] = Field(
        None,
        description='A vendor-specific device identifier. The hint can be a substring of the actual value.',
    )
    rotational: Optional[bool] = Field(
        None,
        description='True if the device should use spinning media, false otherwise.',
    )
    serialNumber: Optional[str] = Field(
        None,
        description='Device serial number. The hint must match the actual value exactly.',
    )
    vendor: Optional[str] = Field(
        None,
        description='The name of the vendor or manufacturer of the device. The hint can be a substring of the actual value.',
    )
    wwn: Optional[str] = Field(
        None,
        description='Unique storage identifier. The hint must match the actual value exactly.',
    )
    wwnVendorExtension: Optional[str] = Field(
        None,
        description='Unique vendor storage identifier. The hint must match the actual value exactly.',
    )
    wwnWithExtension: Optional[str] = Field(
        None,
        description='Unique storage identifier with the vendor extension appended. The hint must match the actual value exactly.',
    )


class Taint(BaseModel):
    effect: str = Field(
        ...,
        description='Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.',
    )
    key: str = Field(
        ..., description='Required. The taint key to be applied to a node.'
    )
    timeAdded: Optional[datetime] = Field(
        None,
        description='TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.',
    )
    value: Optional[str] = Field(
        None, description='Required. The taint value corresponding to the taint key.'
    )


class UserData(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name is unique within a namespace to reference a secret resource.',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace defines the space within which the secret name must be unique.',
    )


class Spec(BaseModel):
    bmc: Optional[Bmc] = Field(None, description='How do we connect to the BMC?')
    bootMACAddress: Optional[
        constr(regex=r'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}')
    ] = Field(
        None,
        description='Which MAC address will PXE boot? This is optional for some types, but required for libvirt VMs driven by vbmc.',
    )
    bootMode: Optional[BootMode] = Field(
        None,
        description='Select the method of initializing the hardware during boot. Defaults to UEFI.',
    )
    consumerRef: Optional[ConsumerRef] = Field(
        None,
        description='ConsumerRef can be used to store information about something that is using a host. When it is not empty, the host is considered "in use".',
    )
    description: Optional[str] = Field(
        None,
        description='Description is a human-entered text used to help identify the host',
    )
    externallyProvisioned: Optional[bool] = Field(
        None,
        description='ExternallyProvisioned means something else is managing the image running on the host and the operator should only manage the power status and hardware inventory inspection. If the Image field is filled in, this field is ignored.',
    )
    hardwareProfile: Optional[str] = Field(
        None,
        description='What is the name of the hardware profile for this host? It should only be necessary to set this when inspection cannot automatically determine the profile.',
    )
    image: Optional[Image] = Field(
        None, description='Image holds the details of the image to be provisioned.'
    )
    metaData: Optional[MetaData] = Field(
        None,
        description='MetaData holds the reference to the Secret containing host metadata (e.g. meta_data.json which is passed to Config Drive).',
    )
    networkData: Optional[NetworkData] = Field(
        None,
        description='NetworkData holds the reference to the Secret containing network configuration (e.g content of network_data.json which is passed to Config Drive).',
    )
    online: bool = Field(..., description='Should the server be online?')
    rootDeviceHints: Optional[RootDeviceHints] = Field(
        None,
        description='Provide guidance about how to choose the device for the image being provisioned.',
    )
    taints: Optional[List[Taint]] = Field(
        None,
        description='Taints is the full, authoritative list of taints to apply to the corresponding Machine. This list will overwrite any modifications made to the Machine on an ongoing basis.',
    )
    userData: Optional[UserData] = Field(
        None,
        description='UserData holds the reference to the Secret containing the user data to be passed to the host before it boots.',
    )


class ErrorType(Enum):
    registration_error = 'registration error'
    inspection_error = 'inspection error'
    provisioning_error = 'provisioning error'
    power_management_error = 'power management error'


class Credentials(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name is unique within a namespace to reference a secret resource.',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace defines the space within which the secret name must be unique.',
    )


class GoodCredentials(BaseModel):
    credentials: Optional[Credentials] = Field(
        None,
        description='SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace',
    )
    credentialsVersion: Optional[str] = None


class Cpu(BaseModel):
    arch: str
    clockMegahertz: float = Field(..., description='ClockSpeed is a clock speed in MHz')
    count: int
    flags: List[str]
    model: str


class Bios(BaseModel):
    date: str = Field(..., description='The release/build date for this BIOS')
    vendor: str = Field(..., description='The vendor name for this BIOS')
    version: str = Field(..., description='The version of the BIOS')


class Firmware(BaseModel):
    bios: Bios = Field(..., description='The BIOS for this firmware')


class Vlan(BaseModel):
    id: conint(ge=0, le=4094) = Field(
        ..., description='VLANID is a 12-bit 802.1Q VLAN identifier'
    )
    name: Optional[str] = None


class Nic(BaseModel):
    ip: str = Field(..., description='The IP address of the device')
    mac: constr(regex=r'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}') = Field(
        ..., description='The device MAC addr'
    )
    model: str = Field(..., description='The name of the model, e.g. "virt-io"')
    name: str = Field(..., description='The name of the NIC, e.g. "nic-1"')
    pxe: bool = Field(..., description='Whether the NIC is PXE Bootable')
    speedGbps: int = Field(..., description='The speed of the device')
    vlanId: conint(ge=0, le=4094) = Field(..., description='The untagged VLAN ID')
    vlans: Optional[List[Vlan]] = Field(None, description='The VLANs available')


class StorageItem(BaseModel):
    hctl: Optional[str] = Field(None, description='The SCSI location of the device')
    model: Optional[str] = Field(None, description='Hardware model')
    name: str = Field(..., description='A name for the disk, e.g. "disk 1 (boot)"')
    rotational: bool = Field(
        ..., description='Whether this disk represents rotational storage'
    )
    serialNumber: str = Field(..., description='The serial number of the device')
    sizeBytes: int = Field(..., description='The size of the disk in Bytes')
    vendor: Optional[str] = Field(
        None, description='The name of the vendor of the device'
    )
    wwn: Optional[str] = Field(None, description='The WWN of the device')
    wwnVendorExtension: Optional[str] = Field(
        None, description='The WWN Vendor extension of the device'
    )
    wwnWithExtension: Optional[str] = Field(
        None, description='The WWN with the extension'
    )


class SystemVendor(BaseModel):
    manufacturer: str
    productName: str
    serialNumber: str


class Hardware(BaseModel):
    cpu: Cpu = Field(..., description='CPU describes one processor on the host.')
    firmware: Firmware = Field(
        ..., description='Firmware describes the firmware on the host.'
    )
    hostname: str
    nics: List[Nic]
    ramMebibytes: int
    storage: List[StorageItem]
    systemVendor: SystemVendor = Field(
        ...,
        description='HardwareSystemVendor stores details about the whole hardware system.',
    )


class Deprovision(BaseModel):
    end: Optional[Any] = None
    start: Optional[Any] = None


class Inspect(BaseModel):
    end: Optional[Any] = None
    start: Optional[Any] = None


class Provision(BaseModel):
    end: Optional[Any] = None
    start: Optional[Any] = None


class Register(BaseModel):
    end: Optional[Any] = None
    start: Optional[Any] = None


class OperationHistory(BaseModel):
    deprovision: Optional[Deprovision] = Field(
        None,
        description='OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.',
    )
    inspect: Optional[Inspect] = Field(
        None,
        description='OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.',
    )
    provision: Optional[Provision] = Field(
        None,
        description='OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.',
    )
    register: Optional[Register] = Field(
        None,
        description='OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.',
    )


class OperationalStatus(Enum):
    _ = ''
    OK = 'OK'
    discovered = 'discovered'
    error = 'error'


class BootModeModel(Enum):
    UEFI = 'UEFI'
    legacy = 'legacy'


class ChecksumTypeModel(Enum):
    md5 = 'md5'
    sha256 = 'sha256'
    sha512 = 'sha512'


class FormatModel(Enum):
    raw = 'raw'
    qcow2 = 'qcow2'
    vdi = 'vdi'
    vmdk = 'vmdk'


class ImageModel(BaseModel):
    checksum: str = Field(..., description='Checksum is the checksum for the image.')
    checksumType: Optional[ChecksumTypeModel] = Field(
        None,
        description='ChecksumType is the checksum algorithm for the image. e.g md5, sha256, sha512',
    )
    format: Optional[FormatModel] = Field(
        None,
        description='DiskFormat contains the format of the image (raw, qcow2, ...) Needs to be set to raw for raw images streaming',
    )
    url: str = Field(..., description='URL is a location of an image to deploy.')


class RootDeviceHintsModel(BaseModel):
    deviceName: Optional[str] = Field(
        None,
        description='A Linux device name like "/dev/vda". The hint must match the actual value exactly.',
    )
    hctl: Optional[str] = Field(
        None,
        description='A SCSI bus address like 0:0:0:0. The hint must match the actual value exactly.',
    )
    minSizeGigabytes: Optional[conint(ge=0)] = Field(
        None, description='The minimum size of the device in Gigabytes.'
    )
    model: Optional[str] = Field(
        None,
        description='A vendor-specific device identifier. The hint can be a substring of the actual value.',
    )
    rotational: Optional[bool] = Field(
        None,
        description='True if the device should use spinning media, false otherwise.',
    )
    serialNumber: Optional[str] = Field(
        None,
        description='Device serial number. The hint must match the actual value exactly.',
    )
    vendor: Optional[str] = Field(
        None,
        description='The name of the vendor or manufacturer of the device. The hint can be a substring of the actual value.',
    )
    wwn: Optional[str] = Field(
        None,
        description='Unique storage identifier. The hint must match the actual value exactly.',
    )
    wwnVendorExtension: Optional[str] = Field(
        None,
        description='Unique vendor storage identifier. The hint must match the actual value exactly.',
    )
    wwnWithExtension: Optional[str] = Field(
        None,
        description='Unique storage identifier with the vendor extension appended. The hint must match the actual value exactly.',
    )


class Provisioning(BaseModel):
    ID: str = Field(
        ..., description="The machine's UUID from the underlying provisioning tool"
    )
    bootMode: Optional[BootModeModel] = Field(
        None, description='BootMode indicates the boot mode used to provision the node'
    )
    image: Optional[ImageModel] = Field(
        None,
        description='Image holds the details of the last image successfully provisioned to the host.',
    )
    rootDeviceHints: Optional[RootDeviceHintsModel] = Field(
        None, description='The RootDevicehints set by the user'
    )
    state: str = Field(
        ...,
        description='An indiciator for what the provisioner is doing with the host.',
    )


class CredentialsModel(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name is unique within a namespace to reference a secret resource.',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace defines the space within which the secret name must be unique.',
    )


class TriedCredentials(BaseModel):
    credentials: Optional[CredentialsModel] = Field(
        None,
        description='SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace',
    )
    credentialsVersion: Optional[str] = None


class Status(BaseModel):
    errorCount: int = Field(
        ...,
        description='ErrorCount records how many times the host has encoutered an error since the last successful operation',
    )
    errorMessage: str = Field(
        ..., description='the last error message reported by the provisioning subsystem'
    )
    errorType: Optional[ErrorType] = Field(
        None,
        description='ErrorType indicates the type of failure encountered when the OperationalStatus is OperationalStatusError',
    )
    goodCredentials: Optional[GoodCredentials] = Field(
        None, description='the last credentials we were able to validate as working'
    )
    hardware: Optional[Hardware] = Field(
        None, description='The hardware discovered to exist on the host.'
    )
    hardwareProfile: str = Field(
        ..., description='The name of the profile matching the hardware details.'
    )
    lastUpdated: Optional[datetime] = Field(
        None, description='LastUpdated identifies when this status was last observed.'
    )
    operationHistory: OperationHistory = Field(
        ...,
        description='OperationHistory holds information about operations performed on this host.',
    )
    operationalStatus: OperationalStatus = Field(
        ..., description='OperationalStatus holds the status of the host'
    )
    poweredOn: bool = Field(
        ..., description='indicator for whether or not the host is powered on'
    )
    provisioning: Provisioning = Field(
        ..., description='Information tracked by the provisioner.'
    )
    triedCredentials: Optional[TriedCredentials] = Field(
        None, description='the last credentials we sent to the provisioning backend'
    )


class ProvisioningNetwork(Enum):
    Managed = 'Managed'
    Unmanaged = 'Unmanaged'
    Disabled = 'Disabled'


class SpecModel(BaseModel):
    provisioningDHCPExternal: Optional[bool] = Field(
        None,
        description='ProvisioningDHCPExternal indicates whether the DHCP server for IP addresses in the provisioning DHCP range is present within the metal3 cluster or external to it. This field is being deprecated in favor of provisioningNetwork.',
    )
    provisioningDHCPRange: Optional[str] = Field(
        None,
        description='ProvisioningDHCPRange needs to be interpreted along with ProvisioningDHCPExternal. If the value of provisioningDHCPExternal is set to False, then ProvisioningDHCPRange represents the range of IP addresses that the DHCP server running within the metal3 cluster can use while provisioning baremetal servers. If the value of ProvisioningDHCPExternal is set to True, then the value of ProvisioningDHCPRange will be ignored. When the value of ProvisioningDHCPExternal is set to False, indicating an internal DHCP server and the value of ProvisioningDHCPRange is not set, then the DHCP range is taken to be the default range which goes from .10 to .100 of the ProvisioningNetworkCIDR. This is the only value in all of the Provisioning configuration that can be changed after the installer has created the CR. This value needs to be two comma sererated IP addresses within the ProvisioningNetworkCIDR where the 1st address represents the start of the range and the 2nd address represents the last usable address in the  range.',
    )
    provisioningIP: Optional[str] = Field(
        None,
        description='ProvisioningIP is the IP address assigned to the provisioningInterface of the baremetal server. This IP address should be within the provisioning subnet, and outside of the DHCP range.',
    )
    provisioningInterface: Optional[str] = Field(
        None,
        description='ProvisioningInterface is the name of the network interface on a baremetal server to the provisioning network. It can have values like eth1 or ens3.',
    )
    provisioningNetwork: Optional[ProvisioningNetwork] = Field(
        None,
        description='ProvisioningNetwork provides a way to indicate the state of the underlying network configuration for the provisioning network. This field can have one of the following values - `Managed`- when the provisioning network is completely managed by the Baremetal IPI solution. `Unmanaged`- when the provsioning network is present and used but the user is responsible for managing DHCP. Virtual media provisioning is recommended but PXE is still available if required. `Disabled`- when the provisioning network is fully disabled. User can bring up the baremetal cluster using virtual media or assisted installation. If using metal3 for power management, BMCs must be accessible from the machine networks. User should provide two IPs on the external network that would be used for provisioning services.',
    )
    provisioningNetworkCIDR: Optional[str] = Field(
        None,
        description='ProvisioningNetworkCIDR is the network on which the baremetal nodes are provisioned. The provisioningIP and the IPs in the dhcpRange all come from within this network.',
    )
    provisioningOSDownloadURL: Optional[str] = Field(
        None,
        description='ProvisioningOSDownloadURL is the location from which the OS Image used to boot baremetal host machines can be downloaded by the metal3 cluster.',
    )


class Condition(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class Generation(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class StatusModel(BaseModel):
    conditions: Optional[List[Condition]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[Generation]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class BareMetalHost(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[Spec] = Field(
        None, description='BareMetalHostSpec defines the desired state of BareMetalHost'
    )
    status: Optional[Status] = Field(
        None,
        description='BareMetalHostStatus defines the observed state of BareMetalHost',
    )


class BareMetalHostList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[BareMetalHost] = Field(
        ...,
        description='List of baremetalhosts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class ProvisioningModel(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel] = Field(
        None, description='ProvisioningSpec defines the desired state of Provisioning'
    )
    status: Optional[StatusModel] = Field(
        None,
        description='ProvisioningStatus defines the observed state of Provisioning',
    )


class ProvisioningList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ProvisioningModel] = Field(
        ...,
        description='List of provisionings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
